"use strict";(self.webpackChunkstadata_flutter_sdk=self.webpackChunkstadata_flutter_sdk||[]).push([[5408],{7841:(a,n,e)=>{e.r(n),e.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"api-docs/list/subject-categories","title":"Kategori Subjek","description":"API Kategori Subjek menyediakan akses ke kerangka organisasi tingkat tinggi yang digunakan oleh BPS (Badan Pusat Statistik) Indonesia untuk mengelompokkan subjek-subjek statistik terkait ke dalam area tematik yang koheren. Kategori subjek mewakili tingkat klasifikasi tematik yang paling luas dalam sistem statistik Indonesia, berfungsi sebagai pengelompokan payung yang berisi berbagai subjek terkait.","source":"@site/i18n/id/docusaurus-plugin-content-docs/version-0.8.0/api-docs/list/subject-categories.md","sourceDirName":"api-docs/list","slug":"/api-docs/list/subject-categories","permalink":"/stadata_flutter_sdk/id/docs/0.8.0/api-docs/list/subject-categories","draft":false,"unlisted":false,"editUrl":"https://github.com/ryanaidilp/stadata_flutter_sdk/tree/main/docs/versioned_docs/version-0.8.0/api-docs/list/subject-categories.md","tags":[],"version":"0.8.0","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Indikator Strategis","permalink":"/stadata_flutter_sdk/id/docs/0.8.0/api-docs/list/strategic-indicators"},"next":{"title":"Subjek","permalink":"/stadata_flutter_sdk/id/docs/0.8.0/api-docs/list/subjects"}}');var t=e(4848),s=e(8453);const r={},o="Kategori Subjek",l={},d=[{value:"Memahami Kategori Subjek BPS",id:"memahami-kategori-subjek-bps",level:2},{value:"Struktur Sistem Kategori",id:"struktur-sistem-kategori",level:2},{value:"Parameter",id:"parameter",level:2},{value:"Contoh",id:"contoh",level:2},{value:"1. Mengambil Semua Kategori Subjek untuk Domain",id:"1-mengambil-semua-kategori-subjek-untuk-domain",level:3},{value:"2. Membandingkan Kategori Antar Domain",id:"2-membandingkan-kategori-antar-domain",level:3},{value:"3. Membangun Penemuan Subjek Berdasarkan Kategori",id:"3-membangun-penemuan-subjek-berdasarkan-kategori",level:3},{value:"4. Analisis Konten Berdasarkan Kategori",id:"4-analisis-konten-berdasarkan-kategori",level:3},{value:"5. Membangun Sistem Navigasi Hierarkis",id:"5-membangun-sistem-navigasi-hierarkis",level:3},{value:"Properti (SubjectCategory)",id:"properti-subjectcategory",level:2},{value:"Jenis Kategori Subjek Umum",id:"jenis-kategori-subjek-umum",level:2},{value:"Kategori Ekonomi",id:"kategori-ekonomi",level:3},{value:"Kategori Sosial dan Demografi",id:"kategori-sosial-dan-demografi",level:3},{value:"Kategori Lingkungan dan Sumber Daya",id:"kategori-lingkungan-dan-sumber-daya",level:3},{value:"Kategori Tata Kelola dan Administrasi",id:"kategori-tata-kelola-dan-administrasi",level:3},{value:"Alur Kerja Penemuan Kategori",id:"alur-kerja-penemuan-kategori",level:2},{value:"Contoh Manajemen Kategori Lengkap",id:"contoh-manajemen-kategori-lengkap",level:3},{value:"Integrasi dengan API Lain",id:"integrasi-dengan-api-lain",level:2},{value:"Membangun Aplikasi Data Berbasis Kategori",id:"membangun-aplikasi-data-berbasis-kategori",level:3},{value:"Penanganan Error",id:"penanganan-error",level:2},{value:"Pertimbangan Kinerja",id:"pertimbangan-kinerja",level:2}];function g(a){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...a.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"kategori-subjek",children:"Kategori Subjek"})}),"\n",(0,t.jsx)(n.p,{children:"API Kategori Subjek menyediakan akses ke kerangka organisasi tingkat tinggi yang digunakan oleh BPS (Badan Pusat Statistik) Indonesia untuk mengelompokkan subjek-subjek statistik terkait ke dalam area tematik yang koheren. Kategori subjek mewakili tingkat klasifikasi tematik yang paling luas dalam sistem statistik Indonesia, berfungsi sebagai pengelompokan payung yang berisi berbagai subjek terkait."}),"\n",(0,t.jsx)(n.p,{children:"Memahami kategori subjek sangat penting untuk menavigasi lanskap statistik Indonesia secara efisien. Kategori-kategori ini menyediakan tulang punggung organisasi yang membantu pengguna menemukan konten statistik terkait, memahami hubungan tematik, dan membangun kerangka analitis yang komprehensif di berbagai area penelitian statistik."}),"\n",(0,t.jsx)(n.h2,{id:"memahami-kategori-subjek-bps",children:"Memahami Kategori Subjek BPS"}),"\n",(0,t.jsx)(n.p,{children:"Kategori subjek menyediakan organisasi tematik tingkat tertinggi:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Payung Tematik"}),": Pengelompokan luas yang mencakup domain statistik terkait"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Struktur Navigasi"}),": Kerangka organisasi utama untuk penemuan konten"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Kerangka Analitis"}),": Fondasi untuk analisis statistik lintas subjek"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Organisasi Konten"}),": Pengelompokan sistematis subjek berdasarkan kesamaan tematik"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Panduan Penelitian"}),": Kerangka untuk memahami hubungan domain statistik"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"struktur-sistem-kategori",children:"Struktur Sistem Kategori"}),"\n",(0,t.jsx)(n.p,{children:"Kategori subjek BPS dirancang untuk mencerminkan area utama penelitian statistik:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Kategori Ekonomi"}),": Pengelompokan terkait aktivitas ekonomi, indikator, dan analisis"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Kategori Sosial"}),": Kategori yang mencakup subjek demografi, pendidikan, kesehatan, dan kesejahteraan"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Kategori Lingkungan"}),": Pengelompokan untuk subjek lingkungan, sumber daya alam, dan keberlanjutan"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Kategori Administratif"}),": Kategori untuk tata kelola, administrasi publik, dan subjek institusional"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Kategori Lintas Bidang"}),": Kategori interdisipliner yang mencakup berbagai domain"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"parameter",children:"Parameter"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Tipe"}),(0,t.jsx)(n.th,{children:"Deskripsi"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"domain"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"String"})}),(0,t.jsxs)(n.td,{children:["Kode domain (wilayah) untuk mengambil kategori subjek ",(0,t.jsx)(n.strong,{children:"(wajib)"})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"lang"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"DataLanguage"})}),(0,t.jsxs)(n.td,{children:["Bahasa untuk data kategori subjek (default: ",(0,t.jsx)(n.code,{children:"DataLanguage.id"}),")"]})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"contoh",children:"Contoh"}),"\n",(0,t.jsx)(n.h3,{id:"1-mengambil-semua-kategori-subjek-untuk-domain",children:"1. Mengambil Semua Kategori Subjek untuk Domain"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// Ambil kategori subjek dari BPS Jawa Tengah\nfinal subjectCategoryResult = await StadataFlutter.instance.list.subjectCategories(\n  domain: '3300', // Kode domain Jawa Tengah\n  lang: DataLanguage.id,\n);\n\nfinal subjectCategoryList = subjectCategoryResult.data;\nfinal pagination = subjectCategoryResult.pagination;\n\n// Tampilkan informasi paginasi\nprint('Halaman Saat Ini: ${pagination.page}');\nprint('Total Halaman: ${pagination.pages}');\nprint('Jumlah Data pada Halaman Ini: ${pagination.count}');\nprint('Per Halaman: ${pagination.perPage}');\nprint('Total: ${pagination.total}');\nprint('------------------------');\n\n// Tampilkan data kategori subjek yang diambil\nfor (final subjectCategory in subjectCategoryList) {\n  print('ID Kategori Subjek: ${subjectCategory.id}');\n  print('Nama Kategori Subjek: ${subjectCategory.name}');\n  print('------------------------');\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-membandingkan-kategori-antar-domain",children:"2. Membandingkan Kategori Antar Domain"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// Bandingkan kategori subjek antara wilayah yang berbeda\nclass CategoryComparator {\n  static Future<void> compareSubjectCategories() async {\n    final domains = ['0000', '3100', '3200', '3300']; // Nasional, Jakarta, Jabar, Jateng\n    final domainCategories = <String, List<SubjectCategory>>{};\n    \n    for (final domain in domains) {\n      final categories = await StadataFlutter.instance.list.subjectCategories(\n        domain: domain,\n        lang: DataLanguage.id,\n      );\n      domainCategories[domain] = categories.data;\n      \n      await Future.delayed(Duration(milliseconds: 300));\n    }\n    \n    print('=== Distribusi Kategori Subjek ===');\n    for (final entry in domainCategories.entries) {\n      print('Domain ${entry.key}: ${entry.value.length} kategori');\n      for (final category in entry.value) {\n        print('  - ${category.name} (ID: ${category.id})');\n      }\n      print('------------------------');\n    }\n    \n    // Temukan kategori umum di semua domain\n    final nationalCategories = domainCategories['0000'] ?? [];\n    print('\\\\n=== Analisis Ketersediaan Kategori ===');\n    \n    for (final nationalCategory in nationalCategories) {\n      print('Kategori: ${nationalCategory.name}');\n      for (final entry in domainCategories.entries) {\n        if (entry.key != '0000') {\n          final hasCategory = entry.value.any((cat) => cat.id == nationalCategory.id);\n          print('  ${entry.key}: ${hasCategory ? 'Tersedia' : 'Tidak Tersedia'}');\n        }\n      }\n      print('---');\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"3-membangun-penemuan-subjek-berdasarkan-kategori",children:"3. Membangun Penemuan Subjek Berdasarkan Kategori"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// Gunakan kategori untuk menemukan dan mengorganisir subjek\nclass CategoryBasedSubjectExplorer {\n  static Future<void> exploreSubjectsByCategory(String domain) async {\n    try {\n      // 1. Ambil semua kategori subjek\n      final categories = await StadataFlutter.instance.list.subjectCategories(\n        domain: domain,\n        lang: DataLanguage.id,\n      );\n      \n      print('=== Penemuan Subjek Berdasarkan Kategori ===');\n      print('Kategori Tersedia: ${categories.data.length}');\n      \n      // 2. Untuk setiap kategori, ambil subjek-subjeknya\n      for (final category in categories.data) {\n        print('\\\\n=== Kategori: ${category.name} (ID: ${category.id}) ===');\n        \n        // Ambil subjek dalam kategori ini\n        final subjects = await StadataFlutter.instance.list.subjects(\n          domain: domain,\n          lang: DataLanguage.id,\n          subjectCategoryId: category.id,\n        );\n        \n        print('Subjek dalam kategori: ${subjects.data.length}');\n        \n        // Hitung statistik kategori\n        final totalTables = subjects.data\n            .map((s) => s.nTable ?? 0)\n            .fold(0, (a, b) => a + b);\n        \n        print('Total tabel dalam kategori: $totalTables');\n        \n        // Tampilkan subjek teratas berdasarkan jumlah tabel\n        final topSubjects = subjects.data\n            .where((s) => s.nTable != null && s.nTable! > 0)\n            .toList()\n          ..sort((a, b) => (b.nTable ?? 0).compareTo(a.nTable ?? 0));\n        \n        print('Subjek teratas:');\n        for (final subject in topSubjects.take(3)) {\n          print('  \u2022 ${subject.name}: ${subject.nTable} tabel');\n        }\n        \n        if (topSubjects.isEmpty) {\n          print('  Tidak ada subjek dengan tabel data tersedia');\n        }\n        \n        await Future.delayed(Duration(milliseconds: 200));\n      }\n      \n    } catch (e) {\n      print('Error eksplorasi kategori: $e');\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"4-analisis-konten-berdasarkan-kategori",children:"4. Analisis Konten Berdasarkan Kategori"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// Analisis distribusi konten di berbagai kategori\nclass CategoryContentAnalyzer {\n  static Future<void> analyzeCategoryContent(String domain) async {\n    try {\n      // Ambil kategori dan konten terkaitnya\n      final categories = await StadataFlutter.instance.list.subjectCategories(\n        domain: domain,\n        lang: DataLanguage.id,\n      );\n      \n      final categoryAnalysis = <String, Map<String, dynamic>>{};\n      \n      for (final category in categories.data) {\n        // Ambil subjek untuk kategori ini\n        final subjects = await StadataFlutter.instance.list.subjects(\n          domain: domain,\n          lang: DataLanguage.id,\n          subjectCategoryId: category.id,\n        );\n        \n        // Hitung metrik kategori\n        final subjectCount = subjects.data.length;\n        final totalTables = subjects.data\n            .map((s) => s.nTable ?? 0)\n            .fold(0, (a, b) => a + b);\n        \n        final subjectsWithData = subjects.data\n            .where((s) => s.nTable != null && s.nTable! > 0)\n            .length;\n        \n        final avgTablesPerSubject = subjectCount > 0 ? totalTables / subjectCount : 0.0;\n        \n        categoryAnalysis[category.name] = {\n          'id': category.id,\n          'subjectCount': subjectCount,\n          'totalTables': totalTables,\n          'subjectsWithData': subjectsWithData,\n          'avgTablesPerSubject': avgTablesPerSubject,\n          'dataRichness': subjectCount > 0 ? (subjectsWithData / subjectCount) : 0.0,\n        };\n        \n        await Future.delayed(Duration(milliseconds: 200));\n      }\n      \n      // Buat laporan analisis\n      print('=== Analisis Konten Kategori ===');\n      final sortedCategories = categoryAnalysis.entries.toList()\n        ..sort((a, b) => (b.value['totalTables'] as int).compareTo(a.value['totalTables'] as int));\n      \n      for (final entry in sortedCategories) {\n        final categoryName = entry.key;\n        final stats = entry.value;\n        \n        print('\ud83d\udcc1 $categoryName');\n        print('   Subjek: ${stats['subjectCount']}');\n        print('   Total Tabel: ${stats['totalTables']}');\n        print('   Subjek dengan Data: ${stats['subjectsWithData']}');\n        print('   Rata-rata Tabel/Subjek: ${(stats['avgTablesPerSubject'] as double).toStringAsFixed(1)}');\n        print('   Kekayaan Data: ${((stats['dataRichness'] as double) * 100).toStringAsFixed(1)}%');\n        \n        // Indikator kualitas kategori\n        if (stats['totalTables'] as int > 50) {\n          print('   \ud83c\udf1f Kategori konten tinggi');\n        }\n        if ((stats['dataRichness'] as double) > 0.8) {\n          print('   \ud83d\udc8e Cakupan data tinggi');\n        }\n        \n        print('');\n      }\n      \n    } catch (e) {\n      print('Error analisis kategori: $e');\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"5-membangun-sistem-navigasi-hierarkis",children:"5. Membangun Sistem Navigasi Hierarkis"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// Buat navigasi hierarkis lengkap berdasarkan kategori dan subjek\nclass HierarchicalNavigationBuilder {\n  static Future<Map<String, dynamic>> buildCompleteNavigation(String domain) async {\n    final navigationTree = <String, dynamic>{};\n    \n    try {\n      // Ambil semua kategori\n      final categories = await StadataFlutter.instance.list.subjectCategories(\n        domain: domain,\n        lang: DataLanguage.id,\n      );\n      \n      navigationTree['domain'] = domain;\n      navigationTree['totalCategories'] = categories.data.length;\n      navigationTree['categories'] = <Map<String, dynamic>>[];\n      \n      for (final category in categories.data) {\n        // Ambil subjek untuk kategori ini\n        final subjects = await StadataFlutter.instance.list.subjects(\n          domain: domain,\n          lang: DataLanguage.id,\n          subjectCategoryId: category.id,\n        );\n        \n        // Bangun node kategori\n        final categoryNode = <String, dynamic>{\n          'id': category.id,\n          'name': category.name,\n          'subjectCount': subjects.data.length,\n          'subjects': <Map<String, dynamic>>[],\n        };\n        \n        // Tambahkan subjek ke kategori\n        for (final subject in subjects.data) {\n          categoryNode['subjects'].add({\n            'id': subject.id,\n            'name': subject.name,\n            'tableCount': subject.nTable ?? 0,\n            'hasData': (subject.nTable ?? 0) > 0,\n          });\n        }\n        \n        // Hitung total kategori\n        final totalTables = subjects.data\n            .map((s) => s.nTable ?? 0)\n            .fold(0, (a, b) => a + b);\n        \n        categoryNode['totalTables'] = totalTables;\n        \n        (navigationTree['categories'] as List<Map<String, dynamic>>).add(categoryNode);\n        \n        await Future.delayed(Duration(milliseconds: 150));\n      }\n      \n      // Hitung statistik navigasi\n      final allCategories = navigationTree['categories'] as List<Map<String, dynamic>>;\n      final totalSubjects = allCategories\n          .map((cat) => cat['subjectCount'] as int)\n          .fold(0, (a, b) => a + b);\n      \n      final totalTables = allCategories\n          .map((cat) => cat['totalTables'] as int)\n          .fold(0, (a, b) => a + b);\n      \n      navigationTree['totalSubjects'] = totalSubjects;\n      navigationTree['totalTables'] = totalTables;\n      \n      // Tampilkan ringkasan navigasi\n      print('=== Ringkasan Navigasi Hierarkis ===');\n      print('Domain: $domain');\n      print('Kategori: ${navigationTree['totalCategories']}');\n      print('Total Subjek: $totalSubjects');\n      print('Total Tabel: $totalTables');\n      print('');\n      \n      // Tampilkan rincian kategori\n      for (final category in allCategories) {\n        print('\ud83d\udcc1 ${category['name']}');\n        print('   Subjek: ${category['subjectCount']}');\n        print('   Tabel: ${category['totalTables']}');\n        \n        final subjects = category['subjects'] as List<Map<String, dynamic>>;\n        final subjectsWithData = subjects.where((s) => s['hasData'] as bool).length;\n        print('   Cakupan Data: $subjectsWithData/${subjects.length} subjek');\n        print('');\n      }\n      \n      return navigationTree;\n      \n    } catch (e) {\n      print('Error membangun navigasi: $e');\n      return {};\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"properti-subjectcategory",children:"Properti (SubjectCategory)"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Properti"}),(0,t.jsx)(n.th,{children:"Tipe"}),(0,t.jsx)(n.th,{children:"Deskripsi"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"id"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"int"})}),(0,t.jsx)(n.td,{children:"Pengenal unik untuk kategori subjek"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"name"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"String"})}),(0,t.jsx)(n.td,{children:"Nama deskriptif kategori subjek"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"jenis-kategori-subjek-umum",children:"Jenis Kategori Subjek Umum"}),"\n",(0,t.jsx)(n.h3,{id:"kategori-ekonomi",children:"Kategori Ekonomi"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Indikator Makroekonomi"}),": Metrik kinerja ekonomi nasional dan regional"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Ekonomi Sektoral"}),": Data ekonomi spesifik industri dan analisis"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Perdagangan dan Komersial"}),": Aktivitas komersial, neraca perdagangan, statistik pasar"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Statistik Keuangan"}),": Perbankan, kebijakan moneter, indikator pasar modal"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Tenaga Kerja dan Ketenagakerjaan"}),": Statistik tenaga kerja, tren ketenagakerjaan, data upah"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"kategori-sosial-dan-demografi",children:"Kategori Sosial dan Demografi"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Penduduk dan Demografi"}),": Statistik penduduk, tren demografi, migrasi"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Pendidikan dan Pengembangan SDM"}),": Statistik pendidikan, literasi, pengembangan keterampilan"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Kesehatan dan Kesejahteraan"}),": Indikator kesehatan, statistik kesehatan masyarakat, kesejahteraan sosial"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Perumahan dan Pembangunan Perkotaan"}),": Kondisi perumahan, perencanaan kota, infrastruktur"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Pelayanan Sosial"}),": Layanan publik, program komunitas, bantuan sosial"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"kategori-lingkungan-dan-sumber-daya",children:"Kategori Lingkungan dan Sumber Daya"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Sumber Daya Alam"}),": Statistik lingkungan, pemanfaatan sumber daya, konservasi"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Pertanian dan Pangan"}),": Produksi pertanian, ketahanan pangan, pembangunan pedesaan"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Energi dan Utilitas"}),": Produksi energi, konsumsi, layanan utilitas"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Transportasi"}),": Infrastruktur transportasi, mobilitas, logistik"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Teknologi dan Inovasi"}),": Statistik TIK, transformasi digital, metrik inovasi"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"kategori-tata-kelola-dan-administrasi",children:"Kategori Tata Kelola dan Administrasi"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Administrasi Publik"}),": Operasi pemerintah, efisiensi administratif"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Pembangunan Daerah"}),": Statistik pemerintah daerah, perencanaan regional"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Keadilan dan Keamanan"}),": Indikator sistem hukum, keamanan publik, statistik keamanan"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Hubungan Internasional"}),": Kerja sama internasional, statistik diplomasi"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"alur-kerja-penemuan-kategori",children:"Alur Kerja Penemuan Kategori"}),"\n",(0,t.jsx)(n.p,{children:"Alur kerja umum untuk menggunakan kategori subjek secara efektif:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Gambaran Kategori"}),": Dapatkan semua kategori yang tersedia untuk domain"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Analisis Konten"}),": Analisis subjek dan ketersediaan data dalam setiap kategori"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Fokus Tematik"}),": Pilih kategori yang relevan untuk kebutuhan penelitian spesifik"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Eksplorasi Subjek"}),": Gunakan kategori untuk menemukan subjek terkait"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Integrasi Data"}),": Gabungkan data dari berbagai kategori untuk analisis komprehensif"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"contoh-manajemen-kategori-lengkap",children:"Contoh Manajemen Kategori Lengkap"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// Sistem manajemen dan pemanfaatan kategori komprehensif\nclass SubjectCategoryManager {\n  static Future<void> manageCompleteWorkflow() async {\n    try {\n      // 1. Analisis kategori multi-domain\n      final domains = ['0000', '3100', '3200']; // Nasional, Jakarta, Jabar\n      final domainAnalysis = <String, Map<String, dynamic>>{};\n      \n      for (final domain in domains) {\n        final categories = await StadataFlutter.instance.list.subjectCategories(\n          domain: domain,\n          lang: DataLanguage.id,\n        );\n        \n        // Bangun analisis kategori spesifik domain\n        final categoryData = <String, dynamic>{\n          'totalCategories': categories.data.length,\n          'categories': <Map<String, dynamic>>[],\n        };\n        \n        for (final category in categories.data) {\n          final subjects = await StadataFlutter.instance.list.subjects(\n            domain: domain,\n            lang: DataLanguage.id,\n            subjectCategoryId: category.id,\n          );\n          \n          final totalTables = subjects.data\n              .map((s) => s.nTable ?? 0)\n              .fold(0, (a, b) => a + b);\n          \n          categoryData['categories'].add({\n            'id': category.id,\n            'name': category.name,\n            'subjectCount': subjects.data.length,\n            'totalTables': totalTables,\n          });\n          \n          await Future.delayed(Duration(milliseconds: 100));\n        }\n        \n        domainAnalysis[domain] = categoryData;\n      }\n      \n      // 2. Perbandingan lintas domain\n      print('=== Perbandingan Kategori Lintas Domain ===');\n      for (final entry in domainAnalysis.entries) {\n        final domain = entry.key;\n        final data = entry.value;\n        \n        print('Domain $domain:');\n        print('  Kategori: ${data['totalCategories']}');\n        \n        final categories = data['categories'] as List<Map<String, dynamic>>;\n        final totalTables = categories\n            .map((cat) => cat['totalTables'] as int)\n            .fold(0, (a, b) => a + b);\n        \n        print('  Total Tabel: $totalTables');\n        \n        // Temukan kategori teratas berdasarkan konten\n        final topCategory = categories.isNotEmpty\n            ? categories.reduce((a, b) => \n                (a['totalTables'] as int) > (b['totalTables'] as int) ? a : b)\n            : null;\n        \n        if (topCategory != null) {\n          print('  Kategori Teratas: ${topCategory['name']} (${topCategory['totalTables']} tabel)');\n        }\n        \n        print('');\n      }\n      \n      // 3. Rekomendasi pemanfaatan kategori\n      print('=== Rekomendasi Pemanfaatan Kategori ===');\n      final nationalData = domainAnalysis['0000'];\n      if (nationalData != null) {\n        final nationalCategories = nationalData['categories'] as List<Map<String, dynamic>>;\n        \n        // Rekomendasikan kategori konten tinggi\n        final highContentCategories = nationalCategories\n            .where((cat) => (cat['totalTables'] as int) > 20)\n            .toList()\n          ..sort((a, b) => (b['totalTables'] as int).compareTo(a['totalTables'] as int));\n        \n        print('Kategori Konten Tinggi (>20 tabel):');\n        for (final category in highContentCategories.take(5)) {\n          print('  \ud83c\udf1f ${category['name']}: ${category['totalTables']} tabel');\n          print('     Subjek: ${category['subjectCount']}');\n          print('     Direkomendasikan untuk: Analisis statistik komprehensif');\n        }\n        \n        // Rekomendasikan kategori berkembang\n        final emergingCategories = nationalCategories\n            .where((cat) => (cat['subjectCount'] as int) > 3 && (cat['totalTables'] as int) < 20)\n            .toList();\n        \n        if (emergingCategories.isNotEmpty) {\n          print('\\\\nKategori Berkembang (cakupan subjek baik, data berkembang):');\n          for (final category in emergingCategories.take(3)) {\n            print('  \ud83d\ude80 ${category['name']}: ${category['subjectCount']} subjek');\n            print('     Direkomendasikan untuk: Penelitian eksplorasi dan pemantauan');\n          }\n        }\n      }\n      \n    } catch (e) {\n      print('Error manajemen kategori: $e');\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"integrasi-dengan-api-lain",children:"Integrasi dengan API Lain"}),"\n",(0,t.jsx)(n.h3,{id:"membangun-aplikasi-data-berbasis-kategori",children:"Membangun Aplikasi Data Berbasis Kategori"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// Buat aplikasi data komprehensif menggunakan struktur kategori\nFuture<void> buildCategoryBasedDataApp(String domain) async {\n  try {\n    // Dapatkan kategori sebagai struktur navigasi\n    final categories = await StadataFlutter.instance.list.subjectCategories(\n      domain: domain,\n      lang: DataLanguage.id,\n    );\n    \n    print('=== Aplikasi Data Berbasis Kategori ===');\n    \n    for (final category in categories.data) {\n      print('\\\\nMemproses Kategori: ${category.name}');\n      \n      // Dapatkan subjek dalam kategori ini\n      final subjects = await StadataFlutter.instance.list.subjects(\n        domain: domain,\n        lang: DataLanguage.id,\n        subjectCategoryId: category.id,\n      );\n      \n      // Untuk setiap subjek, kumpulkan sumber daya terkait\n      for (final subject in subjects.data.take(2)) { // Batasi untuk demo\n        print('  Subjek: ${subject.name}');\n        \n        // Dapatkan variabel untuk subjek ini\n        final variables = await StadataFlutter.instance.list.variables(\n          domain: domain,\n          subjectID: subject.id,\n          lang: DataLanguage.id,\n        );\n        \n        // Dapatkan tabel statis untuk subjek ini\n        final staticTables = await StadataFlutter.instance.list.staticTable(\n          domain: domain,\n          lang: DataLanguage.id,\n        );\n        \n        final subjectTables = staticTables.data\n            .where((table) => table.subjectId == subject.id)\n            .length;\n        \n        print('    Variabel: ${variables.data.length}');\n        print('    Tabel Statis: $subjectTables');\n        print('    Tabel Tersedia: ${subject.nTable ?? 0}');\n        \n        // Ini menciptakan konteks data lengkap untuk hierarki kategori-subjek\n        print('    \u2192 Siap untuk analisis dan visualisasi data');\n      }\n      \n      await Future.delayed(Duration(milliseconds: 300));\n    }\n    \n  } catch (e) {\n    print('Error membangun aplikasi data: $e');\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"penanganan-error",children:"Penanganan Error"}),"\n",(0,t.jsxs)(n.p,{children:["Metode API Kategori Subjek mengembalikan ",(0,t.jsx)(n.code,{children:"Future<ListResult<SubjectCategory>>"})," dan dapat menimbulkan pengecualian spesifik:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"SubjectCategoryException"}),": Error terkait kategori subjek (domain tidak valid, error akses)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ApiException"}),": Error terkait jaringan atau API"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ApiKeyNotFoundException"}),": Kunci API tidak valid atau hilang"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"try {\n  final result = await StadataFlutter.instance.list.subjectCategories(\n    domain: '3200',\n    lang: DataLanguage.id,\n  );\n  \n  // Proses hasil yang berhasil\n  print('Ditemukan ${result.data.length} kategori subjek');\n  \n} on SubjectCategoryException catch (e) {\n  print('Error kategori subjek: ${e.message}');\n  // Tangani error validasi domain atau masalah akses kategori\n  \n} on ApiException catch (e) {\n  print('Error API: ${e.message}');\n  // Tangani error konektivitas jaringan atau layanan API\n  \n} catch (e) {\n  print('Error tak terduga: $e');\n  // Tangani error tak terduga lainnya\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"pertimbangan-kinerja",children:"Pertimbangan Kinerja"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Caching Kategori"}),": Cache daftar kategori karena sangat jarang berubah"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Pemuatan Hierarkis"}),": Muat kategori dulu, kemudian subjek sesuai kebutuhan"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Navigasi Efisien"}),": Gunakan kategori untuk mengurangi cakupan query subjek"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Prioritas Konten"}),": Fokus pada kategori dengan jumlah subjek dan tabel yang lebih tinggi"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Optimasi Lintas Domain"}),": Gunakan struktur kategori untuk mengoptimalkan query multi-domain"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Manajemen Memori"}),": Hindari memuat hierarki lengkap untuk semua kategori secara bersamaan"]}),"\n"]})]})}function u(a={}){const{wrapper:n}={...(0,s.R)(),...a.components};return n?(0,t.jsx)(n,{...a,children:(0,t.jsx)(g,{...a})}):g(a)}},8453:(a,n,e)=>{e.d(n,{R:()=>r,x:()=>o});var i=e(6540);const t={},s=i.createContext(t);function r(a){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof a?a(n):{...n,...a}},[n,a])}function o(a){let n;return n=a.disableParentContext?"function"==typeof a.components?a.components(t):a.components||t:r(a.components),i.createElement(s.Provider,{value:n},a.children)}}}]);