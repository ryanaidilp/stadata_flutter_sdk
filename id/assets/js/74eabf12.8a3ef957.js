"use strict";(self.webpackChunkstadata_flutter_sdk=self.webpackChunkstadata_flutter_sdk||[]).push([[3473],{8453:(n,a,e)=>{e.d(a,{R:()=>r,x:()=>l});var i=e(6540);const t={},s=i.createContext(t);function r(n){const a=i.useContext(s);return i.useMemo(function(){return"function"==typeof n?n(a):{...a,...n}},[a,n])}function l(n){let a;return a=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:r(n.components),i.createElement(s.Provider,{value:a},n.children)}},9747:(n,a,e)=>{e.r(a),e.d(a,{assets:()=>u,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"api-docs/list/subjects","title":"Subjek","description":"API Subjek menyediakan akses ke sistem organisasi tematik yang digunakan oleh BPS (Badan Pusat Statistik) Indonesia untuk mengkategorikan data statistik dan konten. Subjek mewakili area tematik fundamental yang mengorganisir informasi statistik Indonesia, mencakup berbagai domain seperti demografi, ekonomi, indikator sosial, lingkungan, dan tata kelola.","source":"@site/i18n/id/docusaurus-plugin-content-docs/current/api-docs/list/subjects.md","sourceDirName":"api-docs/list","slug":"/api-docs/list/subjects","permalink":"/stadata_flutter_sdk/id/docs/api-docs/list/subjects","draft":false,"unlisted":false,"editUrl":"https://github.com/ryanaidilp/stadata_flutter_sdk/tree/main/docs/docs/api-docs/list/subjects.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Kategori Subjek","permalink":"/stadata_flutter_sdk/id/docs/api-docs/list/subject-categories"},"next":{"title":"Satuan","permalink":"/stadata_flutter_sdk/id/docs/api-docs/list/units"}}');var t=e(4848),s=e(8453);const r={},l="Subjek",u={},d=[{value:"Memahami Subjek BPS",id:"memahami-subjek-bps",level:2},{value:"Struktur Sistem Subjek",id:"struktur-sistem-subjek",level:2},{value:"Parameter",id:"parameter",level:2},{value:"Contoh",id:"contoh",level:2},{value:"1. Mendapatkan Semua Subjek untuk Domain",id:"1-mendapatkan-semua-subjek-untuk-domain",level:3},{value:"2. Menyaring Subjek berdasarkan Kategori",id:"2-menyaring-subjek-berdasarkan-kategori",level:3},{value:"3. Eksplorasi Distribusi Subjek di Berbagai Domain",id:"3-eksplorasi-distribusi-subjek-di-berbagai-domain",level:3},{value:"4. Analisis Kategori Subjek dan Konten",id:"4-analisis-kategori-subjek-dan-konten",level:3},{value:"5. Membangun Sistem Navigasi Berbasis Subjek",id:"5-membangun-sistem-navigasi-berbasis-subjek",level:3},{value:"Properti (Subject)",id:"properti-subject",level:2},{value:"Area Subjek Umum",id:"area-subjek-umum",level:2},{value:"Subjek Ekonomi",id:"subjek-ekonomi",level:3},{value:"Subjek Demografi dan Sosial",id:"subjek-demografi-dan-sosial",level:3},{value:"Subjek Lingkungan dan Infrastruktur",id:"subjek-lingkungan-dan-infrastruktur",level:3},{value:"Subjek Tata Kelola dan Administrasi",id:"subjek-tata-kelola-dan-administrasi",level:3},{value:"Alur Kerja Penemuan Subjek",id:"alur-kerja-penemuan-subjek",level:2},{value:"Contoh Penemuan Subjek Lengkap",id:"contoh-penemuan-subjek-lengkap",level:3},{value:"Integrasi dengan API Lain",id:"integrasi-dengan-api-lain",level:2},{value:"Membangun Kueri Data Berbasis Subjek",id:"membangun-kueri-data-berbasis-subjek",level:3},{value:"Penanganan Error",id:"penanganan-error",level:2},{value:"Pertimbangan Kinerja",id:"pertimbangan-kinerja",level:2}];function o(n){const a={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.header,{children:(0,t.jsx)(a.h1,{id:"subjek",children:"Subjek"})}),"\n",(0,t.jsx)(a.p,{children:"API Subjek menyediakan akses ke sistem organisasi tematik yang digunakan oleh BPS (Badan Pusat Statistik) Indonesia untuk mengkategorikan data statistik dan konten. Subjek mewakili area tematik fundamental yang mengorganisir informasi statistik Indonesia, mencakup berbagai domain seperti demografi, ekonomi, indikator sosial, lingkungan, dan tata kelola."}),"\n",(0,t.jsx)(a.p,{children:"Memahami subjek BPS sangat penting untuk menavigasi lanskap statistik Indonesia, karena subjek berfungsi sebagai kerangka organisasi utama untuk penemuan data, klasifikasi konten, dan penelitian analitis. Setiap subjek mewakili area penyelidikan statistik yang koheren dengan tabel data terkait, publikasi, dan sumber daya analitis."}),"\n",(0,t.jsx)(a.h2,{id:"memahami-subjek-bps",children:"Memahami Subjek BPS"}),"\n",(0,t.jsx)(a.p,{children:"Subjek menyediakan organisasi tematik untuk ekosistem statistik Indonesia:"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Klasifikasi Tematik"}),": Pengelompokan sistematis konten statistik berdasarkan materi subjek"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Organisasi Data"}),": Kerangka kerja untuk mengorganisir tabel, publikasi, dan indikator"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Navigasi Penelitian"}),": Panduan untuk menemukan sumber daya statistik terkait"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Kategorisasi Konten"}),": Struktur untuk mengklasifikasikan output dan produk data BPS"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Kerangka Analitis"}),": Dasar untuk analisis statistik khusus subjek"]}),"\n"]}),"\n",(0,t.jsx)(a.h2,{id:"struktur-sistem-subjek",children:"Struktur Sistem Subjek"}),"\n",(0,t.jsx)(a.p,{children:"Subjek BPS diorganisir secara hierarkis dalam sistem statistik:"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Kategori Subjek"}),": Pengelompokan tematik luas yang berisi subjek terkait"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Subjek Individual"}),": Area tematik spesifik dalam kategori"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Tabel Terkait"}),": Tabel data yang diorganisir di bawah setiap subjek"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Referensi Silang"}),": Hubungan antara subjek dan elemen statistik lainnya"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Pemetaan Konten"}),": Tautan antara subjek dan publikasi, indikator, variabel"]}),"\n"]}),"\n",(0,t.jsx)(a.h2,{id:"parameter",children:"Parameter"}),"\n",(0,t.jsxs)(a.table,{children:[(0,t.jsx)(a.thead,{children:(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.th,{children:"Parameter"}),(0,t.jsx)(a.th,{children:"Tipe"}),(0,t.jsx)(a.th,{children:"Deskripsi"})]})}),(0,t.jsxs)(a.tbody,{children:[(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"domain"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"String"})}),(0,t.jsxs)(a.td,{children:["Kode domain (wilayah) untuk mendapatkan subjek ",(0,t.jsx)(a.strong,{children:"(wajib)"})]})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"lang"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"DataLanguage"})}),(0,t.jsxs)(a.td,{children:["Bahasa untuk data subjek (default: ",(0,t.jsx)(a.code,{children:"DataLanguage.id"}),")"]})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"page"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"int"})}),(0,t.jsxs)(a.td,{children:["Nomor halaman (default: ",(0,t.jsx)(a.code,{children:"1"}),")"]})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"subjectCategoryId"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"int?"})}),(0,t.jsx)(a.td,{children:"ID kategori subjek untuk menyaring subjek (opsional)"})]})]})]}),"\n",(0,t.jsx)(a.h2,{id:"contoh",children:"Contoh"}),"\n",(0,t.jsx)(a.h3,{id:"1-mendapatkan-semua-subjek-untuk-domain",children:"1. Mendapatkan Semua Subjek untuk Domain"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-dart",children:"// Mengambil subjek dari BPS Jawa Tengah\nfinal subjectResult = await StadataFlutter.instance.list.subjects(\n  domain: '3300', // Kode domain Jawa Tengah\n  lang: DataLanguage.id,\n);\n\nfinal subjectList = subjectResult.data;\nfinal pagination = subjectResult.pagination;\n\n// Menampilkan informasi halaman\nprint('Halaman Saat Ini: ${pagination.page}');\nprint('Total Halaman: ${pagination.pages}');\nprint('Jumlah Data di Halaman Ini: ${pagination.count}');\nprint('Per Halaman: ${pagination.perPage}');\nprint('Total: ${pagination.total}');\nprint('------------------------');\n\n// Menampilkan data subjek yang didapatkan\nfor (final subject in subjectList) {\n  print('ID Subjek: ${subject.id}');\n  print('Nama Subjek: ${subject.name}');\n  print('ID Kategori: ${subject.category?.id ?? 'Tidak ada kategori'}');\n  print('Nama Kategori: ${subject.category?.name ?? 'Tanpa kategori'}');\n  print('Jumlah Tabel: ${subject.nTable ?? 0}');\n  print('------------------------');\n}\n"})}),"\n",(0,t.jsx)(a.h3,{id:"2-menyaring-subjek-berdasarkan-kategori",children:"2. Menyaring Subjek berdasarkan Kategori"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-dart",children:"// Mendapatkan subjek dalam kategori tertentu (misalnya, subjek ekonomi)\nfinal economicSubjects = await StadataFlutter.instance.list.subjects(\n  domain: '0000', // Tingkat nasional\n  lang: DataLanguage.id,\n  subjectCategoryId: 2, // Asumsikan '2' adalah kategori ekonomi\n);\n\n// Menganalisis subjek ekonomi\nprint('=== Subjek Ekonomi ===');\nfor (final subject in economicSubjects.data) {\n  print('Subjek Ekonomi: ${subject.name}');\n  print('ID Subjek: ${subject.id}');\n  print('Tabel Tersedia: ${subject.nTable ?? 0}');\n  print('Kategori: ${subject.category?.name ?? 'Tidak diketahui'}');\n  \n  // Mengidentifikasi subjek bernilai tinggi (yang memiliki banyak tabel)\n  if (subject.nTable != null && subject.nTable! > 10) {\n    print('  \u2b50 Subjek bernilai tinggi (${subject.nTable} tabel)');\n  }\n  \n  print('------------------------');\n}\n"})}),"\n",(0,t.jsx)(a.h3,{id:"3-eksplorasi-distribusi-subjek-di-berbagai-domain",children:"3. Eksplorasi Distribusi Subjek di Berbagai Domain"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-dart",children:"// Membandingkan ketersediaan subjek di berbagai wilayah\nclass SubjectExplorer {\n  static Future<void> compareSubjectsAcrossDomains() async {\n    final domains = ['0000', '3100', '3200', '3300']; // Nasional, Jakarta, Jawa Barat, Jawa Tengah\n    final domainSubjects = <String, List<Subject>>{};\n    \n    for (final domain in domains) {\n      final subjects = await StadataFlutter.instance.list.subjects(\n        domain: domain,\n        lang: DataLanguage.id,\n      );\n      domainSubjects[domain] = subjects.data;\n      \n      await Future.delayed(Duration(milliseconds: 300));\n    }\n    \n    print('=== Analisis Distribusi Subjek ===');\n    for (final entry in domainSubjects.entries) {\n      print('Domain ${entry.key}: ${entry.value.length} subjek');\n      \n      // Menghitung total tabel yang tersedia\n      final totalTables = entry.value\n          .map((s) => s.nTable ?? 0)\n          .reduce((a, b) => a + b);\n      \n      print('  Total Tabel: $totalTables');\n      \n      // Mencari subjek dengan tabel terbanyak\n      final topSubjects = entry.value\n          .where((s) => s.nTable != null && s.nTable! > 0)\n          .toList()\n        ..sort((a, b) => (b.nTable ?? 0).compareTo(a.nTable ?? 0));\n      \n      if (topSubjects.isNotEmpty) {\n        print('  Subjek Teratas: ${topSubjects.first.name} (${topSubjects.first.nTable} tabel)');\n      }\n      \n      print('---');\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(a.h3,{id:"4-analisis-kategori-subjek-dan-konten",children:"4. Analisis Kategori Subjek dan Konten"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-dart",children:"// Analisis komprehensif subjek dan kategorinya\nclass SubjectAnalyzer {\n  static Future<void> analyzeSubjectStructure(String domain) async {\n    try {\n      // 1. Mendapatkan semua subjek untuk domain\n      final allSubjects = await StadataFlutter.instance.list.subjects(\n        domain: domain,\n        lang: DataLanguage.id,\n      );\n      \n      print('=== Analisis Subjek untuk Domain $domain ===');\n      print('Total Subjek: ${allSubjects.data.length}');\n      \n      // 2. Mengelompokkan subjek berdasarkan kategori\n      final categoryGroups = <String, List<Subject>>{};\n      for (final subject in allSubjects.data) {\n        final categoryName = subject.category?.name ?? 'Tanpa kategori';\n        categoryGroups[categoryName] = (categoryGroups[categoryName] ?? [])..add(subject);\n      }\n      \n      print('Kategori Subjek: ${categoryGroups.keys.length}');\n      \n      // 3. Menganalisis setiap kategori\n      for (final entry in categoryGroups.entries) {\n        print('\\\\n=== Kategori: ${entry.key} ===');\n        print('Subjek dalam kategori: ${entry.value.length}');\n        \n        // Menghitung statistik kategori\n        final totalTables = entry.value\n            .map((s) => s.nTable ?? 0)\n            .reduce((a, b) => a + b);\n        \n        final avgTables = totalTables / entry.value.length;\n        \n        print('Total tabel dalam kategori: $totalTables');\n        print('Rata-rata tabel per subjek: ${avgTables.toStringAsFixed(1)}');\n        \n        // Menampilkan subjek teratas dalam kategori\n        final sortedSubjects = entry.value\n            .where((s) => s.nTable != null && s.nTable! > 0)\n            .toList()\n          ..sort((a, b) => (b.nTable ?? 0).compareTo(a.nTable ?? 0));\n        \n        print('Subjek teratas:');\n        for (final subject in sortedSubjects.take(3)) {\n          print('  - ${subject.name}: ${subject.nTable} tabel');\n        }\n      }\n      \n      // 4. Mengidentifikasi subjek tanpa tabel\n      final subjectsWithoutTables = allSubjects.data\n          .where((s) => s.nTable == null || s.nTable == 0)\n          .length;\n      \n      print('\\\\n=== Ketersediaan Data ===');\n      print('Subjek tanpa tabel: $subjectsWithoutTables');\n      print('Subjek dengan data: ${allSubjects.data.length - subjectsWithoutTables}');\n      \n    } catch (e) {\n      print('Error analisis subjek: $e');\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(a.h3,{id:"5-membangun-sistem-navigasi-berbasis-subjek",children:"5. Membangun Sistem Navigasi Berbasis Subjek"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-dart",children:"// Membuat sistem navigasi berdasarkan subjek dan kategori\nclass SubjectNavigationBuilder {\n  static Future<Map<String, Map<String, dynamic>>> buildNavigationStructure(String domain) async {\n    final navigationStructure = <String, Map<String, dynamic>>{};\n    \n    try {\n      // Mendapatkan semua subjek\n      final subjects = await StadataFlutter.instance.list.subjects(\n        domain: domain,\n        lang: DataLanguage.id,\n      );\n      \n      // Mendapatkan kategori unik dari daftar subjek\n      final categories = <int, String>{};\n      for (final subject in subjects.data) {\n        if (subject.category != null) {\n          categories[subject.category!.id] = subject.category!.name;\n        }\n      }\n      \n      // Membangun navigasi untuk setiap kategori\n      for (final categoryEntry in categories.entries) {\n        final categoryId = categoryEntry.key;\n        final categoryName = categoryEntry.value;\n        \n        // Mendapatkan subjek untuk kategori ini\n        final categorySubjects = await StadataFlutter.instance.list.subjects(\n          domain: domain,\n          lang: DataLanguage.id,\n          subjectCategoryId: categoryId,\n        );\n        \n        // Membangun struktur navigasi kategori\n        final subjectItems = <Map<String, dynamic>>[];\n        for (final subject in categorySubjects.data) {\n          subjectItems.add({\n            'id': subject.id,\n            'name': subject.name,\n            'tableCount': subject.nTable ?? 0,\n            'hasData': (subject.nTable ?? 0) > 0,\n          });\n        }\n        \n        navigationStructure[categoryName] = {\n          'categoryId': categoryId,\n          'subjectCount': subjectItems.length,\n          'totalTables': subjectItems.map((s) => s['tableCount'] as int).reduce((a, b) => a + b),\n          'subjects': subjectItems,\n        };\n        \n        await Future.delayed(Duration(milliseconds: 200));\n      }\n      \n      // Menampilkan struktur navigasi\n      print('=== Struktur Navigasi Subjek ===');\n      for (final entry in navigationStructure.entries) {\n        final categoryName = entry.key;\n        final categoryData = entry.value;\n        \n        print('\ud83d\udcc1 $categoryName');\n        print('   Subjek: ${categoryData['subjectCount']}');\n        print('   Total Tabel: ${categoryData['totalTables']}');\n        \n        final subjects = categoryData['subjects'] as List<Map<String, dynamic>>;\n        for (final subject in subjects.take(3)) {\n          print('   \ud83d\udcca ${subject['name']} (${subject['tableCount']} tabel)');\n        }\n        \n        if (subjects.length > 3) {\n          print('   ... dan ${subjects.length - 3} subjek lainnya');\n        }\n        print('');\n      }\n      \n      return navigationStructure;\n      \n    } catch (e) {\n      print('Error pembangunan navigasi: $e');\n      return {};\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(a.h2,{id:"properti-subject",children:"Properti (Subject)"}),"\n",(0,t.jsxs)(a.table,{children:[(0,t.jsx)(a.thead,{children:(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.th,{children:"Properti"}),(0,t.jsx)(a.th,{children:"Tipe"}),(0,t.jsx)(a.th,{children:"Deskripsi"})]})}),(0,t.jsxs)(a.tbody,{children:[(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"id"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"int"})}),(0,t.jsx)(a.td,{children:"Pengidentifikasi unik untuk subjek"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"name"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"String"})}),(0,t.jsx)(a.td,{children:"Nama deskriptif subjek statistik"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"category"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"SubjectCategory?"})}),(0,t.jsx)(a.td,{children:"Kategori subjek yang mengandung subjek ini (opsional)"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"nTable"})}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"int?"})}),(0,t.jsx)(a.td,{children:"Jumlah tabel data yang terkait dengan subjek ini (opsional)"})]})]})]}),"\n",(0,t.jsx)(a.h2,{id:"area-subjek-umum",children:"Area Subjek Umum"}),"\n",(0,t.jsx)(a.h3,{id:"subjek-ekonomi",children:"Subjek Ekonomi"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Indikator Makroekonomi"}),": PDB, inflasi, metrik pertumbuhan ekonomi"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Ekonomi Sektoral"}),": Analisis sektor industri, pertanian, jasa"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Perdagangan dan Investasi"}),": Data ekspor/impor, statistik investasi asing"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Ekonomi Ketenagakerjaan"}),": Ketenagakerjaan, upah, indikator produktivitas"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Statistik Keuangan"}),": Perbankan, pasar modal, indikator moneter"]}),"\n"]}),"\n",(0,t.jsx)(a.h3,{id:"subjek-demografi-dan-sosial",children:"Subjek Demografi dan Sosial"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Statistik Penduduk"}),": Jumlah penduduk, demografi, migrasi"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Pendidikan"}),": Pendaftaran sekolah, literasi, hasil pendidikan"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Kesehatan"}),": Akses layanan kesehatan, mortalitas, statistik morbiditas"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Kesejahteraan Sosial"}),": Kemiskinan, distribusi pendapatan, bantuan sosial"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Perumahan dan Kondisi Hidup"}),": Kualitas perumahan, pembangunan perkotaan"]}),"\n"]}),"\n",(0,t.jsx)(a.h3,{id:"subjek-lingkungan-dan-infrastruktur",children:"Subjek Lingkungan dan Infrastruktur"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Statistik Lingkungan"}),": Sumber daya alam, kualitas lingkungan"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Transportasi"}),": Infrastruktur, mobilitas, penggunaan transportasi"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Energi"}),": Produksi energi, konsumsi, energi terbarukan"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Teknologi Informasi"}),": Infrastruktur digital, penggunaan TIK"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Pertanian"}),": Produksi pertanian, penggunaan lahan, pembangunan pedesaan"]}),"\n"]}),"\n",(0,t.jsx)(a.h3,{id:"subjek-tata-kelola-dan-administrasi",children:"Subjek Tata Kelola dan Administrasi"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Administrasi Publik"}),": Operasi pemerintahan, layanan publik"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Pembangunan Daerah"}),": Statistik pemerintah daerah, indikator regional"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Keadilan dan Keamanan"}),": Statistik kriminal, indikator sistem hukum"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Hubungan Internasional"}),": Kerjasama internasional, statistik diplomatik"]}),"\n"]}),"\n",(0,t.jsx)(a.h2,{id:"alur-kerja-penemuan-subjek",children:"Alur Kerja Penemuan Subjek"}),"\n",(0,t.jsx)(a.p,{children:"Alur kerja tipikal untuk menemukan dan menggunakan subjek:"}),"\n",(0,t.jsxs)(a.ol,{children:["\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Pemilihan Domain"}),": Memilih area geografis yang diminati"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Eksplorasi Kategori"}),": Menjelajahi subjek berdasarkan kategori tematik"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Analisis Subjek"}),": Meneliti subjek individual dan ketersediaan datanya"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Penemuan Konten"}),": Menggunakan subjek untuk menemukan tabel dan publikasi terkait"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Integrasi Data"}),": Menggabungkan beberapa subjek untuk analisis komprehensif"]}),"\n"]}),"\n",(0,t.jsx)(a.h3,{id:"contoh-penemuan-subjek-lengkap",children:"Contoh Penemuan Subjek Lengkap"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-dart",children:"// Alur kerja penemuan dan pemanfaatan subjek yang komprehensif\nclass SubjectDiscoverySystem {\n  static Future<void> discoverAndAnalyzeSubjects() async {\n    try {\n      // 1. Menemukan subjek di tingkat nasional\n      final nationalSubjects = await StadataFlutter.instance.list.subjects(\n        domain: '0000', // Nasional\n        lang: DataLanguage.id,\n      );\n      \n      print('=== Penemuan Subjek Nasional ===');\n      print('Total Subjek Nasional: ${nationalSubjects.data.length}');\n      \n      // 2. Mengidentifikasi subjek ekonomi utama\n      final economicKeywords = ['ekonomi', 'perdagangan', 'industri', 'keuangan'];\n      final economicSubjects = nationalSubjects.data.where((subject) {\n        return economicKeywords.any((keyword) => \n            subject.name.toLowerCase().contains(keyword));\n      }).toList();\n      \n      print('Subjek Ekonomi Ditemukan: ${economicSubjects.length}');\n      \n      // 3. Menganalisis kekayaan data subjek ekonomi\n      final richEconomicSubjects = economicSubjects\n          .where((s) => s.nTable != null && s.nTable! > 5)\n          .toList()\n        ..sort((a, b) => (b.nTable ?? 0).compareTo(a.nTable ?? 0));\n      \n      print('\\\\n=== Subjek Ekonomi Kaya Data ===');\n      for (final subject in richEconomicSubjects.take(5)) {\n        print('${subject.name}: ${subject.nTable} tabel');\n        print('  ID Subjek: ${subject.id}');\n        print('  Kategori: ${subject.category?.name ?? 'Tanpa kategori'}');\n        \n        // Subjek ini dapat digunakan untuk kueri data lebih lanjut\n        print('  \u2192 Gunakan untuk kueri tabel data ekonomi');\n        print('  \u2192 Dapat difilter dalam publikasi dan variabel');\n      }\n      \n      // 4. Perbandingan dengan data provinsi\n      final provincialComparison = await _compareProvincialSubjects(\n        richEconomicSubjects.take(3).toList(),\n      );\n      \n      print('\\\\n=== Perbandingan Provinsi ===');\n      provincialComparison.forEach((subjectName, provincialData) {\n        print('$subjectName:');\n        provincialData.forEach((province, tableCount) {\n          print('  $province: $tableCount tabel');\n        });\n      });\n      \n    } catch (e) {\n      print('Error penemuan subjek: $e');\n    }\n  }\n  \n  static Future<Map<String, Map<String, int>>> _compareProvincialSubjects(\n    List<Subject> nationalSubjects,\n  ) async {\n    final comparison = <String, Map<String, int>>{};\n    final provinces = ['3100', '3200', '3300']; // Jakarta, Jawa Barat, Jawa Tengah\n    \n    for (final nationalSubject in nationalSubjects) {\n      final provincialData = <String, int>{};\n      \n      for (final province in provinces) {\n        try {\n          final provinceSubjects = await StadataFlutter.instance.list.subjects(\n            domain: province,\n            lang: DataLanguage.id,\n          );\n          \n          // Mencari subjek yang cocok berdasarkan nama\n          final matchingSubject = provinceSubjects.data\n              .where((s) => s.name.contains(nationalSubject.name.split(' ').first))\n              .firstOrNull;\n          \n          provincialData[province] = matchingSubject?.nTable ?? 0;\n          \n        } catch (e) {\n          provincialData[province] = 0;\n        }\n        \n        await Future.delayed(Duration(milliseconds: 100));\n      }\n      \n      comparison[nationalSubject.name] = provincialData;\n    }\n    \n    return comparison;\n  }\n}\n"})}),"\n",(0,t.jsx)(a.h2,{id:"integrasi-dengan-api-lain",children:"Integrasi dengan API Lain"}),"\n",(0,t.jsx)(a.h3,{id:"membangun-kueri-data-berbasis-subjek",children:"Membangun Kueri Data Berbasis Subjek"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-dart",children:"// Menggunakan subjek untuk membangun analisis data komprehensif\nFuture<void> buildSubjectBasedAnalysis(String domain) async {\n  try {\n    // 1. Mendapatkan subjek untuk domain\n    final subjects = await StadataFlutter.instance.list.subjects(\n      domain: domain,\n      lang: DataLanguage.id,\n    );\n    \n    // 2. Fokus pada subjek dengan data substansial\n    final dataRichSubjects = subjects.data\n        .where((s) => s.nTable != null && s.nTable! > 3)\n        .take(3)\n        .toList();\n    \n    print('=== Analisis Data Berbasis Subjek ===');\n    \n    for (final subject in dataRichSubjects) {\n      print('\\\\nMenganalisis Subjek: ${subject.name}');\n      print('Tabel Tersedia: ${subject.nTable}');\n      \n      // 3. Mendapatkan variabel terkait untuk subjek ini\n      try {\n        final variables = await StadataFlutter.instance.list.variables(\n          domain: domain,\n          subjectID: subject.id,\n          lang: DataLanguage.id,\n        );\n        \n        print('Variabel Terkait: ${variables.data.length}');\n        \n        // 4. Mendapatkan publikasi terkait\n        final publications = await StadataFlutter.instance.list.publications(\n          domain: domain,\n          lang: DataLanguage.id,\n        );\n        \n        // Menyaring publikasi yang mungkin terkait dengan subjek ini\n        final relatedPubs = publications.data\n            .where((pub) => pub.title.toLowerCase()\n                .contains(subject.name.toLowerCase().split(' ').first))\n            .length;\n        \n        print('Publikasi Terkait Potensial: $relatedPubs');\n        \n        // 5. Mendapatkan tabel statis untuk subjek ini\n        final staticTables = await StadataFlutter.instance.list.staticTable(\n          domain: domain,\n          lang: DataLanguage.id,\n        );\n        \n        final subjectTables = staticTables.data\n            .where((table) => table.subjectId == subject.id)\n            .length;\n        \n        print('Tabel Statis untuk Subjek: $subjectTables');\n        \n        print('Analisis Subjek Selesai untuk ${subject.name}');\n        \n      } catch (e) {\n        print('Error menganalisis subjek ${subject.name}: $e');\n      }\n      \n      await Future.delayed(Duration(milliseconds: 500));\n    }\n    \n  } catch (e) {\n    print('Error analisis berbasis subjek: $e');\n  }\n}\n"})}),"\n",(0,t.jsx)(a.h2,{id:"penanganan-error",children:"Penanganan Error"}),"\n",(0,t.jsxs)(a.p,{children:["Metode API Subjek mengembalikan ",(0,t.jsx)(a.code,{children:"Future<ListResult<Subject>>"})," dan dapat melempar pengecualian spesifik:"]}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.code,{children:"SubjectException"}),": Error terkait subjek (domain tidak valid, error ID kategori)"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.code,{children:"ApiException"}),": Error terkait jaringan atau API"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.code,{children:"ApiKeyNotFoundException"}),": Kunci API tidak valid atau hilang"]}),"\n"]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-dart",children:"try {\n  final result = await StadataFlutter.instance.list.subjects(\n    domain: '3200',\n    subjectCategoryId: 2,\n    lang: DataLanguage.id,\n  );\n  \n  // Memproses hasil yang berhasil\n  print('Ditemukan ${result.data.length} subjek');\n  \n} on SubjectException catch (e) {\n  print('Error subjek: ${e.message}');\n  // Menangani error validasi domain atau masalah ID kategori\n  \n} on ApiException catch (e) {\n  print('Error API: ${e.message}');\n  // Menangani error konektivitas jaringan atau layanan API\n  \n} catch (e) {\n  print('Error tak terduga: $e');\n  // Menangani error tak terduga lainnya\n}\n"})}),"\n",(0,t.jsx)(a.h2,{id:"pertimbangan-kinerja",children:"Pertimbangan Kinerja"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Penyaringan Kategori"}),": Gunakan ID kategori subjek untuk mengurangi lingkup kueri ketika fokus pada tema tertentu"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Kesadaran Jumlah Tabel"}),": Pertimbangkan subjek dengan jumlah tabel lebih tinggi untuk analisis kaya data"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Analisis Lintas Domain"}),": Perhatikan batas laju API saat membandingkan subjek di berbagai domain"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Caching Subjek"}),": Cache daftar subjek karena jarang berubah dibandingkan dengan data aktual"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Pemetaan Hubungan"}),": Bangun pemetaan yang efisien antara subjek dan elemen data terkait"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Penanganan Paginasi"}),": Implementasikan paginasi yang tepat untuk domain dengan banyak subjek"]}),"\n"]})]})}function c(n={}){const{wrapper:a}={...(0,s.R)(),...n.components};return a?(0,t.jsx)(a,{...n,children:(0,t.jsx)(o,{...n})}):o(n)}}}]);