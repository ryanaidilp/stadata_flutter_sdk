name: Build APK for PR to Develop

on:
  pull_request:
    branches: [ develop ]
    types: [ opened, synchronize, reopened ]

jobs:
  build-apk:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Get PR info
        id: pr_info
        run: |
          PR_NUMBER="${{ github.event.number }}"
          PR_BRANCH="${{ github.head_ref }}"
          COMMIT_SHA="${{ github.event.pull_request.head.sha }}"
          SHORT_SHA="${COMMIT_SHA:0:7}"
          
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "branch_name=$PR_BRANCH" >> $GITHUB_OUTPUT
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT
          echo "apk_name=Stadata_Example_PR-${PR_NUMBER}_${SHORT_SHA}.apk" >> $GITHUB_OUTPUT
          
          echo "Building APK for PR #$PR_NUMBER from branch: $PR_BRANCH"
          echo "Commit: $COMMIT_SHA"

      - name: Setup Java
        uses: actions/setup-java@v5
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
          cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:'
          cache-path: '${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:'

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        id: flutter-pub-cache
        with:
          path: |
            ~/.pub-cache
            app/example/.dart_tool
            app/example/.flutter-plugins
            app/example/.flutter-plugins-dependencies
            app/example/.packages
            packages/stadata_flutter_sdk/.dart_tool
            packages/stadata_flutter_sdk/.packages
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.yaml') }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.yaml') }}-
            ${{ runner.os }}-pub-

      - name: Cache build_runner outputs
        uses: actions/cache@v4
        id: build-runner-cache
        with:
          path: |
            app/example/lib/**/*.g.dart
            app/example/lib/**/*.gr.dart
            app/example/lib/**/*.config.dart
            app/example/.dart_tool/build
          key: ${{ runner.os }}-build-runner-${{ hashFiles('app/example/pubspec.yaml') }}-${{ hashFiles('app/example/lib/**/*.dart', '!app/example/lib/**/*.g.dart', '!app/example/lib/**/*.gr.dart', '!app/example/lib/**/*.config.dart') }}-${{ hashFiles('app/example/build.yaml') }}
          restore-keys: |
            ${{ runner.os }}-build-runner-${{ hashFiles('app/example/pubspec.yaml') }}-
            ${{ runner.os }}-build-runner-

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            app/example/android/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('app/example/android/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('app/example/android/**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-${{ hashFiles('app/example/android/gradle/wrapper/gradle-wrapper.properties') }}-
            ${{ runner.os }}-gradle-

      - name: Log cache status
        run: |
          echo "### Cache Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Flutter Pub Cache: ${{ steps.flutter-pub-cache.outputs.cache-hit == 'true' && '‚úÖ Hit' || '‚ö†Ô∏è Miss' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build Runner Cache: ${{ steps.build-runner-cache.outputs.cache-hit == 'true' && '‚úÖ Hit' || '‚ö†Ô∏è Miss' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Get Flutter dependencies
        working-directory: app/example
        run: |
          if [ "${{ steps.flutter-pub-cache.outputs.cache-hit }}" == "true" ]; then
            echo "üì¶ Pub cache restored, verifying dependencies..."
          else
            echo "üì¶ Downloading Flutter dependencies..."
          fi
          flutter pub get
          echo "‚úÖ Flutter dependencies ready"

      - name: Setup .env file
        working-directory: app/example
        env:
          ENV_BASE64: ${{ secrets.ENV_BASE64 }}
        run: |
          if [ -n "$ENV_BASE64" ]; then
            echo "Decoding .env file from secret..."
            echo "$ENV_BASE64" | base64 -d > .env
            echo "‚úÖ .env file created successfully"
          else
            echo "‚ö†Ô∏è  Warning: ENV_BASE64 secret not found, creating empty .env"
            touch .env
          fi

      - name: Run build_runner
        working-directory: app/example
        run: |
          if [ "${{ steps.build-runner-cache.outputs.cache-hit }}" == "true" ]; then
            echo "‚úÖ Using cached build_runner outputs"
            echo "Skipping code generation (cache hit)"
          else
            echo "üî® Running build_runner to generate code..."
            flutter pub run build_runner build --delete-conflicting-outputs
            echo "‚úÖ Code generation completed"
          fi

      - name: Build APK with Size Analysis
        working-directory: app/example
        run: |
          echo "Building APK for PR #${{ steps.pr_info.outputs.pr_number }} with size analysis..."

          # Create required directories for size analysis
          mkdir -p build/flutter_size_01
          mkdir -p $HOME/.flutter-devtools

          # Build APK with size analysis
          flutter build apk --release --analyze-size --target-platform android-arm64

          # Rename APK with PR info
          APK_PATH="build/app/outputs/flutter-apk/app-release.apk"
          NEW_APK_NAME="${{ steps.pr_info.outputs.apk_name }}"

          if [ -f "$APK_PATH" ]; then
            mv "$APK_PATH" "build/app/outputs/flutter-apk/$NEW_APK_NAME"
            echo "apk_path=app/example/build/app/outputs/flutter-apk/$NEW_APK_NAME" >> $GITHUB_OUTPUT
            echo "‚úÖ APK built successfully: $NEW_APK_NAME"

            # Get APK size
            APK_SIZE=$(du -h "build/app/outputs/flutter-apk/$NEW_APK_NAME" | cut -f1)
            echo "apk_size=$APK_SIZE" >> $GITHUB_OUTPUT

            # Check for size analysis JSON in multiple locations
            echo "üîç Searching for size analysis JSON..."
            SIZE_JSON=""

            # Search in common locations with wildcard support
            for location in \
              "$HOME/.flutter-devtools/apk-code-size-analysis"*".json" \
              "build/apk-"*"-release-code-size-analysis"*".json" \
              ".flutter-devtools/apk-code-size-analysis"*".json" \
              "build/flutter_size"*"/apk-code-size-analysis"*".json"
            do
              if [ -f "$location" ]; then
                SIZE_JSON="$location"
                echo "‚úÖ Found size analysis JSON: $SIZE_JSON"
                break
              fi
            done

            # If still not found, try to find any JSON with size analysis
            if [ -z "$SIZE_JSON" ]; then
              SIZE_JSON=$(find "$HOME/.flutter-devtools" -name "*size*analysis*.json" -type f 2>/dev/null | head -n 1)
              if [ -n "$SIZE_JSON" ]; then
                echo "‚úÖ Found size analysis JSON via search: $SIZE_JSON"
              fi
            fi

            if [ -n "$SIZE_JSON" ]; then
              # Copy to a known location for artifact upload
              mkdir -p build/size-analysis
              cp "$SIZE_JSON" build/size-analysis/pr-size-analysis.json
              echo "size_json=app/example/build/size-analysis/pr-size-analysis.json" >> $GITHUB_OUTPUT
              echo "‚úÖ Size analysis JSON found and copied: $SIZE_JSON"
            else
              echo "‚ö†Ô∏è  Size analysis JSON not found in expected locations"
            fi
          else
            echo "‚ùå APK build failed - file not found"
            exit 1
          fi
        id: build_apk

      - name: Generate Size Analysis Report
        if: steps.build_apk.outputs.size_json != ''
        run: |
          echo "Generating size analysis report..."
          chmod +x scripts/analyze_apk_size.sh
          ./scripts/analyze_apk_size.sh "${{ steps.build_apk.outputs.size_json }}" "${{ steps.build_apk.outputs.apk_path }}" apk_size_analysis.md
          echo "‚úÖ APK analysis complete"
        id: analyze_apk

      - name: Download Cached Develop Size Analysis
        if: steps.build_apk.outputs.size_json != ''
        id: download_cached
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: develop-size-analysis-latest
          path: develop-artifact/

      - name: Check Cached Artifact
        if: steps.build_apk.outputs.size_json != ''
        id: check_cache
        run: |
          if [ -f "develop-artifact/develop-size-analysis.json" ]; then
            echo "‚úÖ Found cached develop size analysis"
            echo "cache_exists=true" >> $GITHUB_OUTPUT
            echo "base_size_json=develop-artifact/develop-size-analysis.json" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è  No cached develop size analysis found, will build from scratch"
            echo "cache_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Build Base Branch for Comparison
        if: steps.build_apk.outputs.size_json != '' && steps.check_cache.outputs.cache_exists != 'true'
        run: |
          echo "üì¶ Building base branch (develop) for size comparison..."
          echo "‚ÑπÔ∏è  Cached artifact not available, building from develop branch"

          # Save current branch state
          git stash || true

          # Checkout base branch
          git fetch origin develop
          git checkout origin/develop

          cd app/example

          # Setup .env for base build
          if [ -n "${{ secrets.ENV_BASE64 }}" ]; then
            echo "${{ secrets.ENV_BASE64 }}" | base64 -d > .env
          else
            touch .env
          fi

          # Get dependencies
          flutter pub get

          # Run build_runner
          flutter pub run build_runner build --delete-conflicting-outputs || true

          # Create required directories for size analysis
          mkdir -p build/flutter_size_01
          mkdir -p $HOME/.flutter-devtools

          # Build base APK with size analysis
          flutter build apk --release --analyze-size --target-platform android-arm64

          # Check for size analysis JSON in multiple locations
          echo "üîç Searching for base size analysis JSON..."
          BASE_SIZE_JSON=""

          # Search in common locations with wildcard support
          for location in \
            "$HOME/.flutter-devtools/apk-code-size-analysis"*".json" \
            "build/apk-"*"-release-code-size-analysis"*".json" \
            ".flutter-devtools/apk-code-size-analysis"*".json" \
            "build/flutter_size"*"/apk-code-size-analysis"*".json"
          do
            if [ -f "$location" ]; then
              BASE_SIZE_JSON="$location"
              echo "‚úÖ Found base size analysis JSON: $BASE_SIZE_JSON"
              break
            fi
          done

          # If still not found, try to find any JSON with size analysis
          if [ -z "$BASE_SIZE_JSON" ]; then
            BASE_SIZE_JSON=$(find "$HOME/.flutter-devtools" -name "*size*analysis*.json" -type f 2>/dev/null | head -n 1)
            if [ -n "$BASE_SIZE_JSON" ]; then
              echo "‚úÖ Found base size analysis JSON via search: $BASE_SIZE_JSON"
            fi
          fi

          if [ -n "$BASE_SIZE_JSON" ]; then
            # Copy to a known location
            mkdir -p build/size-analysis
            cp "$BASE_SIZE_JSON" build/size-analysis/base-size-analysis.json
            echo "base_size_json=app/example/build/size-analysis/base-size-analysis.json" >> $GITHUB_OUTPUT
            echo "‚úÖ Base branch size analysis generated: $BASE_SIZE_JSON"
          else
            echo "‚ö†Ô∏è  Base branch size analysis not found, skipping comparison"
          fi

          # Return to PR branch
          cd ../..
          git checkout -
          git stash pop || true
        id: build_base
        env:
          ENV_BASE64: ${{ secrets.ENV_BASE64 }}

      - name: Determine Base Size JSON Path
        if: steps.build_apk.outputs.size_json != ''
        id: base_json_path
        run: |
          if [ "${{ steps.check_cache.outputs.cache_exists }}" = "true" ]; then
            echo "base_size_json=${{ steps.check_cache.outputs.base_size_json }}" >> $GITHUB_OUTPUT
            echo "source=cached" >> $GITHUB_OUTPUT
            echo "‚úÖ Using cached develop size analysis"
          elif [ -n "${{ steps.build_base.outputs.base_size_json }}" ]; then
            echo "base_size_json=${{ steps.build_base.outputs.base_size_json }}" >> $GITHUB_OUTPUT
            echo "source=fresh_build" >> $GITHUB_OUTPUT
            echo "‚úÖ Using freshly built size analysis"
          else
            echo "‚ö†Ô∏è  No base size analysis available"
            echo "source=none" >> $GITHUB_OUTPUT
          fi

      - name: Compare SDK Size and Check Threshold
        if: steps.base_json_path.outputs.base_size_json != '' && steps.build_apk.outputs.size_json != ''
        id: size_comparison
        run: |
          echo "Comparing SDK size between base and PR..."

          # Install jq if needed
          if ! command -v jq &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y jq
          fi

          # Extract SDK sizes
          BASE_JSON="${{ steps.base_json_path.outputs.base_size_json }}"
          PR_JSON="${{ steps.build_apk.outputs.size_json }}"
          SOURCE="${{ steps.base_json_path.outputs.source }}"

          echo "üìä Size comparison source: $SOURCE"
          echo "üîç Analyzing JSON files for SDK size..."
          echo "  Base JSON: $BASE_JSON"
          echo "  PR JSON: $PR_JSON"

          # Function to calculate total size of SDK package recursively
          calculate_sdk_size() {
            local json_file="$1"
            jq '
              def sum_values:
                if type == "object" then
                  (.value // 0) + (if .children then (.children | map(sum_values) | add // 0) else 0 end)
                elif type == "array" then
                  map(sum_values) | add // 0
                else
                  0
                end;

              [.. | objects | select(.n? == "package:stadata_flutter_sdk")] |
              if length > 0 then
                (.[0] | sum_values)
              else
                0
              end
            ' "$json_file" 2>/dev/null || echo "0"
          }

          # Get SDK size from base
          echo "üîç Calculating SDK size from base build..."
          BASE_SDK_SIZE=$(calculate_sdk_size "$BASE_JSON")

          # Get SDK size from PR
          echo "üîç Calculating SDK size from PR build..."
          PR_SDK_SIZE=$(calculate_sdk_size "$PR_JSON")

          echo "üìä Extracted sizes:"
          echo "  Base SDK size: $BASE_SDK_SIZE bytes"
          echo "  PR SDK size: $PR_SDK_SIZE bytes"

          # Calculate difference
          if [ "$BASE_SDK_SIZE" = "0" ] || [ "$PR_SDK_SIZE" = "0" ]; then
            echo "‚ö†Ô∏è  SDK size not found in one or both builds, skipping comparison"
            echo "size_increased=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          SIZE_DIFF=$((PR_SDK_SIZE - BASE_SDK_SIZE))
          SIZE_DIFF_PCT=$(echo "scale=2; ($SIZE_DIFF * 100) / $BASE_SDK_SIZE" | bc)

          # Extract file-level breakdown for detailed analysis
          echo "üîç Extracting file-level size breakdown..."

          # Function to extract SDK file sizes with proper aggregation
          extract_sdk_breakdown() {
            local json_file="$1"
            jq -r '
              # Recursively find all SDK-related nodes and sum their values
              def sum_node_values:
                if type == "object" then
                  (.value // 0) + (if .children then (.children | map(sum_node_values) | add // 0) else 0 end)
                else
                  0
                end;

              # Find all .dart files under stadata_flutter_sdk
              def find_dart_files:
                if type == "object" then
                  if .n? and (.n | type == "string") and (.n | endswith(".dart")) then
                    {path: .n, size: sum_node_values}
                  else
                    (if .children then .children | map(find_dart_files) else [] end)
                  end
                else
                  []
                end;

              # Navigate to SDK package and extract files
              [.. | objects | select(.n? == "package:stadata_flutter_sdk")] |
              if length > 0 then
                .[0] | [find_dart_files] | flatten | map(select(.path)) |
                sort_by(-.size) |
                .[] |
                "\(.path)|\(.size)"
              else
                empty
              end
            ' "$json_file" 2>/dev/null
          }

          # Extract file sizes from both builds
          BASE_BREAKDOWN=$(mktemp)
          PR_BREAKDOWN=$(mktemp)

          extract_sdk_breakdown "$BASE_JSON" | sort -t'|' -k1 > "$BASE_BREAKDOWN"
          extract_sdk_breakdown "$PR_JSON" | sort -t'|' -k1 > "$PR_BREAKDOWN"

          # Compare and generate diff report
          FILE_DIFF_REPORT="size_file_changes.md"
          echo "| File | Size Change |" > "$FILE_DIFF_REPORT"
          echo "|------|-------------|" >> "$FILE_DIFF_REPORT"

          # Process differences
          HAS_CHANGES=false

          # Combine all files from both builds
          cat "$BASE_BREAKDOWN" "$PR_BREAKDOWN" | cut -d'|' -f1 | sort -u | while read -r filepath; do
            if [ -z "$filepath" ]; then continue; fi

            BASE_SIZE=$(grep "^${filepath}|" "$BASE_BREAKDOWN" | cut -d'|' -f2 || echo "0")
            PR_SIZE=$(grep "^${filepath}|" "$PR_BREAKDOWN" | cut -d'|' -f2 || echo "0")

            BASE_SIZE=${BASE_SIZE:-0}
            PR_SIZE=${PR_SIZE:-0}

            if [ "$BASE_SIZE" != "$PR_SIZE" ]; then
              DIFF=$((PR_SIZE - BASE_SIZE))
              if [ "$DIFF" -ne 0 ]; then
                DIFF_KB=$(echo "scale=2; $DIFF / 1024" | bc)
                if [ "$DIFF" -gt 0 ]; then
                  echo "| \`${filepath}\` | üìà +${DIFF_KB}KB |" >> "$FILE_DIFF_REPORT"
                else
                  # Remove negative sign for display
                  POS_DIFF_KB=$(echo "$DIFF_KB" | tr -d '-')
                  echo "| \`${filepath}\` | üìâ -${POS_DIFF_KB}KB |" >> "$FILE_DIFF_REPORT"
                fi
                HAS_CHANGES=true
              fi
            fi
          done

          # Check if we have any changes
          if [ "$HAS_CHANGES" = true ] && [ $(wc -l < "$FILE_DIFF_REPORT") -gt 2 ]; then
            echo "file_changes_detected=true" >> $GITHUB_OUTPUT
            echo "‚úÖ File-level changes detected and saved to $FILE_DIFF_REPORT"
          else
            echo "file_changes_detected=false" >> $GITHUB_OUTPUT
            rm -f "$FILE_DIFF_REPORT"
            echo "‚ÑπÔ∏è  No file-level changes detected"
          fi

          # Cleanup
          rm -f "$BASE_BREAKDOWN" "$PR_BREAKDOWN"

          echo "sdk_size_base=$BASE_SDK_SIZE" >> $GITHUB_OUTPUT
          echo "sdk_size_pr=$PR_SDK_SIZE" >> $GITHUB_OUTPUT
          echo "sdk_size_diff=$SIZE_DIFF" >> $GITHUB_OUTPUT
          echo "sdk_size_diff_pct=$SIZE_DIFF_PCT" >> $GITHUB_OUTPUT

          # Define threshold: 50KB (51200 bytes)
          THRESHOLD_BYTES=51200
          THRESHOLD_KB=50

          # Format sizes for display
          BASE_SIZE_KB=$(echo "scale=2; $BASE_SDK_SIZE / 1024" | bc)
          PR_SIZE_KB=$(echo "scale=2; $PR_SDK_SIZE / 1024" | bc)
          DIFF_KB=$(echo "scale=2; $SIZE_DIFF / 1024" | bc)

          echo "sdk_size_base_kb=${BASE_SIZE_KB}KB" >> $GITHUB_OUTPUT
          echo "sdk_size_pr_kb=${PR_SIZE_KB}KB" >> $GITHUB_OUTPUT
          echo "sdk_size_diff_kb=${DIFF_KB}KB" >> $GITHUB_OUTPUT

          if [ "$SIZE_DIFF" -gt "$THRESHOLD_BYTES" ]; then
            echo "‚ö†Ô∏è  SDK size increased by ${DIFF_KB}KB (threshold: ${THRESHOLD_KB}KB)"
            echo "size_increased=true" >> $GITHUB_OUTPUT
            echo "requires_approval=true" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ SDK size change is within acceptable threshold (< ${THRESHOLD_KB}KB)"
            echo "size_increased=false" >> $GITHUB_OUTPUT
            echo "requires_approval=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload APK Analysis Report
        uses: actions/upload-artifact@v4
        with:
          name: apk-analysis-pr-${{ steps.pr_info.outputs.pr_number }}-${{ steps.pr_info.outputs.short_sha }}
          path: apk_size_analysis.md
          retention-days: 30

      - name: Upload Size Analysis JSONs
        if: steps.build_apk.outputs.size_json != ''
        uses: actions/upload-artifact@v4
        with:
          name: size-analysis-json-pr-${{ steps.pr_info.outputs.pr_number }}-${{ steps.pr_info.outputs.short_sha }}
          path: |
            ${{ steps.build_apk.outputs.size_json }}
            ${{ steps.base_json_path.outputs.base_size_json }}
          retention-days: 30

      - name: Upload APK as artifact
        uses: actions/upload-artifact@v4
        with:
          name: stadata-example-pr-${{ steps.pr_info.outputs.pr_number }}-${{ steps.pr_info.outputs.short_sha }}
          path: ${{ steps.build_apk.outputs.apk_path }}
          retention-days: 30

      - name: Get artifact download URL
        id: artifact_url
        run: |
          ARTIFACT_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "artifact_url=$ARTIFACT_URL" >> $GITHUB_OUTPUT

      - name: Comment PR with APK download link
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = ${{ steps.pr_info.outputs.pr_number }};
            const branchName = '${{ steps.pr_info.outputs.branch_name }}';
            const commitSha = '${{ steps.pr_info.outputs.short_sha }}';
            const apkName = '${{ steps.pr_info.outputs.apk_name }}';
            const apkSize = '${{ steps.build_apk.outputs.apk_size }}';
            const artifactUrl = '${{ steps.artifact_url.outputs.artifact_url }}';
            const runId = '${{ github.run_id }}';

            // Size comparison data
            const sizeIncreased = '${{ steps.size_comparison.outputs.size_increased }}' === 'true';
            const requiresApproval = '${{ steps.size_comparison.outputs.requires_approval }}' === 'true';
            const sdkSizeBaseKb = '${{ steps.size_comparison.outputs.sdk_size_base_kb }}';
            const sdkSizePrKb = '${{ steps.size_comparison.outputs.sdk_size_pr_kb }}';
            const sdkSizeDiffKb = '${{ steps.size_comparison.outputs.sdk_size_diff_kb }}';
            const sdkSizeDiffPct = '${{ steps.size_comparison.outputs.sdk_size_diff_pct }}';
            const sdkSizeDiff = '${{ steps.size_comparison.outputs.sdk_size_diff }}';
            const comparisonSource = '${{ steps.base_json_path.outputs.source }}';
            const fileChangesDetected = '${{ steps.size_comparison.outputs.file_changes_detected }}' === 'true';

            // Read file-level changes if available
            let fileChangesSection = '';
            if (fileChangesDetected) {
              const fs = require('fs');
              try {
                const fileChanges = fs.readFileSync('size_file_changes.md', 'utf8');
                if (fileChanges && fileChanges.trim().length > 0) {
                  fileChangesSection = `

            <details>
            <summary>üìä File-Level Changes (click to expand)</summary>

            ${fileChanges}

            </details>
            `;
                }
              } catch (error) {
                console.log('No file changes report found:', error.message);
              }
            }

            // Check if we already commented on this PR
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });

            const botComments = comments.data.filter(comment =>
              comment.user.login === 'github-actions[bot]' &&
              comment.body.includes('üì± APK Build Complete')
            );

            // Build size comparison section
            let sizeComparisonSection = '';
            if (sdkSizeBaseKb && sdkSizePrKb && sdkSizeBaseKb !== '' && sdkSizePrKb !== '') {
              const diffSign = sdkSizeDiff >= 0 ? '+' : '';
              const diffEmoji = sdkSizeDiff >= 0 ? 'üìà' : 'üìâ';

              sizeComparisonSection = `

            ### ${diffEmoji} SDK Size Comparison

            | Metric | Value |
            |--------|-------|
            | **Base (develop)** | ${sdkSizeBaseKb} |
            | **This PR** | ${sdkSizePrKb} |
            | **Difference** | ${diffSign}${sdkSizeDiffKb} (${diffSign}${sdkSizeDiffPct}%) |
            `;

              if (sizeIncreased && requiresApproval) {
                sizeComparisonSection += `

            > ‚ö†Ô∏è **Warning:** SDK size increased by **${sdkSizeDiffKb}**, exceeding the 50KB threshold!
            >
            > **Action Required:** This PR requires approval from @ryanaidilp or a maintainer before merging.
            >
            > Please justify the size increase in the PR description or reduce the SDK size.
            `;
              } else if (sdkSizeDiff > 0) {
                sizeComparisonSection += `

            ‚ÑπÔ∏è SDK size increased but within acceptable threshold (< 50KB).
            `;
              } else {
                sizeComparisonSection += `

            ‚úÖ SDK size decreased or remained stable!
            `;
              }

              // Add file-level changes if available
              if (fileChangesSection) {
                sizeComparisonSection += fileChangesSection;
              }
            }

            const commentBody = `
            ## üì± APK Build Complete

            ‚úÖ **APK successfully built for this PR!**

            ### üìã Build Details
            - **PR**: #${prNumber}
            - **Branch**: \`${branchName}\`
            - **Commit**: \`${commitSha}\`
            - **APK Size**: ${apkSize}
            - **Build Run**: [#${runId}](${artifactUrl})
            ${sizeComparisonSection}
            
            ### üì• Download APK
            
            **Method 1: Direct Download (Recommended)**
            1. Click on the [**Build Run Link**](${artifactUrl}) above
            2. Scroll down to the **"Artifacts"** section
            3. Click on \`stadata-example-pr-${prNumber}-${commitSha}\` to download
            
            **Method 2: GitHub CLI (if you have it installed)**
            \`\`\`bash
            gh run download ${runId} --repo ${{ github.repository }} --name stadata-example-pr-${prNumber}-${commitSha}
            \`\`\`
            
            ### üìù APK Info
            - **Filename**: \`${apkName}\`
            - **Version**: PR #${prNumber} (${commitSha})
            - **Platform**: Android (Release build)
            - **Retention**: 30 days

            ### üìä Size Analysis

            Detailed APK size analysis and SDK contribution report is available!

            **Download the analysis report:**
            1. Go to [Build Run #${runId}](${artifactUrl})
            2. Scroll to **"Artifacts"** section
            3. Download \`apk-analysis-pr-${prNumber}-${commitSha}\`

            The report includes:
            - Complete size breakdown by component
            - Native libraries analysis by ABI
            - DEX files analysis
            - Estimated SDK contribution (~700 KB - 1.2 MB)
            - Size optimization recommendations

            ### üöÄ Installation
            1. Download the APK file
            2. Enable "Install from Unknown Sources" in your Android settings
            3. Install the APK on your Android device
            4. Test the latest changes from this PR

            ---

            ü§ñ *This comment is automatically updated when new commits are pushed to this PR.*
            `;
            
            if (botComments.length > 0) {
              // Update the existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComments[0].id,
                body: commentBody
              });
              console.log('Updated existing APK comment');
            } else {
              // Create a new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
              console.log('Created new APK comment');
            }

      - name: Add Label and Request Review if Size Increased
        if: steps.size_comparison.outputs.requires_approval == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = ${{ steps.pr_info.outputs.pr_number }};

            // Get all repository labels
            const { data: repoLabels } = await github.rest.issues.listLabelsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const labelNames = repoLabels.map(label => label.name);

            // Check and create labels if they don't exist
            const requiredLabels = [
              { name: 'size-increase', color: 'ff9800', description: 'SDK size increased beyond threshold' },
              { name: 'needs-review', color: 'd93f0b', description: 'Requires maintainer review' }
            ];

            for (const label of requiredLabels) {
              if (!labelNames.includes(label.name)) {
                try {
                  await github.rest.issues.createLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: label.name,
                    color: label.color,
                    description: label.description
                  });
                  console.log(`Created label: ${label.name}`);
                } catch (error) {
                  console.error(`Failed to create label ${label.name}:`, error.message);
                }
              }
            }

            // Add labels to PR
            try {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                labels: ['size-increase', 'needs-review']
              });
              console.log('‚úÖ Added size-increase and needs-review labels');
            } catch (error) {
              console.error('‚ùå Failed to add labels:', error.message);
            }

            // Request review from maintainer
            try {
              await github.rest.pulls.requestReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                reviewers: ['ryanaidilp']
              });
              console.log('‚úÖ Requested review from ryanaidilp');
            } catch (error) {
              console.error('‚ùå Failed to request review:', error.message);
            }

      - name: Build summary
        if: always()
        run: |
          echo "## üì± APK Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **PR Number**: #${{ steps.pr_info.outputs.pr_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ steps.pr_info.outputs.branch_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ steps.pr_info.outputs.short_sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **APK Name**: ${{ steps.pr_info.outputs.apk_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ job.status }}" = "success" ]; then
            echo "### ‚úÖ Build Status" >> $GITHUB_STEP_SUMMARY
            echo "APK built successfully!" >> $GITHUB_STEP_SUMMARY
            echo "- **Size**: ${{ steps.build_apk.outputs.apk_size }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Artifact**: [Download APK](${{ steps.artifact_url.outputs.artifact_url }})" >> $GITHUB_STEP_SUMMARY
            echo "- **Retention**: 30 days" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå Build Status" >> $GITHUB_STEP_SUMMARY
            echo "APK build failed!" >> $GITHUB_STEP_SUMMARY
          fi

  # Optional: Notify on build failure
  notify-failure:
    runs-on: ubuntu-latest
    needs: build-apk
    if: failure()
    permissions:
      pull-requests: write
    
    steps:
      - name: Comment on failure
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = ${{ github.event.number }};
            const runId = '${{ github.run_id }}';
            const artifactUrl = `https://github.com/${{ github.repository }}/actions/runs/${runId}`;
            
            const commentBody = `
            ## ‚ùå APK Build Failed
            
            The APK build for this PR has failed. Please check the build logs for more details.
            
            ### üîç Debugging
            - **Build Run**: [#${runId}](${artifactUrl})
            - **PR**: #${prNumber}
            
            ### üí° Common Solutions
            1. Check for compilation errors in your Flutter code
            2. Ensure all dependencies are properly specified
            3. Verify that the code builds locally with \`flutter build apk --release\`
            
            ---
            
            ü§ñ *This comment is automatically generated when APK builds fail.*
            `;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: commentBody
            });