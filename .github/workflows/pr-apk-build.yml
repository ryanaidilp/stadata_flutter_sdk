name: Build APK for PR to Develop

on:
  pull_request:
    branches: [ develop ]
    types: [ opened, synchronize, reopened ]

jobs:
  build-apk:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Get PR info
        id: pr_info
        run: |
          PR_NUMBER="${{ github.event.number }}"
          PR_BRANCH="${{ github.head_ref }}"
          COMMIT_SHA="${{ github.event.pull_request.head.sha }}"
          SHORT_SHA="${COMMIT_SHA:0:7}"
          
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "branch_name=$PR_BRANCH" >> $GITHUB_OUTPUT
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT
          echo "apk_name=Stadata_Example_PR-${PR_NUMBER}_${SHORT_SHA}.apk" >> $GITHUB_OUTPUT
          
          echo "Building APK for PR #$PR_NUMBER from branch: $PR_BRANCH"
          echo "Commit: $COMMIT_SHA"

      - name: Setup Java
        uses: actions/setup-java@v5
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
          cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:'
          cache-path: '${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:'

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        id: flutter-pub-cache
        with:
          path: |
            ~/.pub-cache
            app/example/.dart_tool
            app/example/.flutter-plugins
            app/example/.flutter-plugins-dependencies
            app/example/.packages
            packages/stadata_flutter_sdk/.dart_tool
            packages/stadata_flutter_sdk/.packages
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.yaml') }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.yaml') }}-
            ${{ runner.os }}-pub-

      - name: Cache build_runner outputs
        uses: actions/cache@v4
        id: build-runner-cache
        with:
          path: |
            app/example/lib/**/*.g.dart
            app/example/lib/**/*.gr.dart
            app/example/lib/**/*.config.dart
            app/example/.dart_tool/build
          key: ${{ runner.os }}-build-runner-${{ hashFiles('app/example/pubspec.yaml') }}-${{ hashFiles('app/example/lib/**/*.dart', '!app/example/lib/**/*.g.dart', '!app/example/lib/**/*.gr.dart', '!app/example/lib/**/*.config.dart') }}-${{ hashFiles('app/example/build.yaml') }}
          restore-keys: |
            ${{ runner.os }}-build-runner-${{ hashFiles('app/example/pubspec.yaml') }}-
            ${{ runner.os }}-build-runner-

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            app/example/android/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('app/example/android/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('app/example/android/**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-${{ hashFiles('app/example/android/gradle/wrapper/gradle-wrapper.properties') }}-
            ${{ runner.os }}-gradle-

      - name: Log cache status
        run: |
          echo "### Cache Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Flutter Pub Cache: ${{ steps.flutter-pub-cache.outputs.cache-hit == 'true' && '✅ Hit' || '⚠️ Miss' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build Runner Cache: ${{ steps.build-runner-cache.outputs.cache-hit == 'true' && '✅ Hit' || '⚠️ Miss' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Get Flutter dependencies
        working-directory: app/example
        run: |
          if [ "${{ steps.flutter-pub-cache.outputs.cache-hit }}" == "true" ]; then
            echo "📦 Pub cache restored, verifying dependencies..."
          else
            echo "📦 Downloading Flutter dependencies..."
          fi
          flutter pub get
          echo "✅ Flutter dependencies ready"

      - name: Setup .env file
        working-directory: app/example
        env:
          ENV_BASE64: ${{ secrets.ENV_BASE64 }}
        run: |
          if [ -n "$ENV_BASE64" ]; then
            echo "Decoding .env file from secret..."
            echo "$ENV_BASE64" | base64 -d > .env
            echo "✅ .env file created successfully"
          else
            echo "⚠️  Warning: ENV_BASE64 secret not found, creating empty .env"
            touch .env
          fi

      - name: Run build_runner
        working-directory: app/example
        run: |
          if [ "${{ steps.build-runner-cache.outputs.cache-hit }}" == "true" ]; then
            echo "✅ Using cached build_runner outputs"
            echo "Skipping code generation (cache hit)"
          else
            echo "🔨 Running build_runner to generate code..."
            flutter pub run build_runner build --delete-conflicting-outputs
            echo "✅ Code generation completed"
          fi

      - name: Build APK with Size Analysis
        working-directory: app/example
        run: |
          echo "Building APK for PR #${{ steps.pr_info.outputs.pr_number }} with size analysis..."

          # Clean build directory to ensure fresh analysis
          flutter clean

          # Build APK with size analysis (without --release flag as per Flutter docs)
          # The --analyze-size flag automatically builds in release mode
          flutter build apk --analyze-size --target-platform android-arm64

          # Rename APK with PR info
          APK_PATH="build/app/outputs/flutter-apk/app-release.apk"
          NEW_APK_NAME="${{ steps.pr_info.outputs.apk_name }}"

          if [ -f "$APK_PATH" ]; then
            mv "$APK_PATH" "build/app/outputs/flutter-apk/$NEW_APK_NAME"
            echo "apk_path=app/example/build/app/outputs/flutter-apk/$NEW_APK_NAME" >> $GITHUB_OUTPUT
            echo "✅ APK built successfully: $NEW_APK_NAME"

            # Get APK size
            APK_SIZE=$(du -h "build/app/outputs/flutter-apk/$NEW_APK_NAME" | cut -f1)
            echo "apk_size=$APK_SIZE" >> $GITHUB_OUTPUT

            # Check for size analysis JSON
            echo "🔍 Searching for size analysis JSON..."
            chmod +x ../../scripts/ci/find_size_analysis_json.sh
            SIZE_JSON=$(../../scripts/ci/find_size_analysis_json.sh . || echo "")

            if [ -n "$SIZE_JSON" ]; then
              echo "✅ Found size analysis JSON: $(basename $SIZE_JSON)"
            else
              echo "⚠️  Size analysis JSON not found"
            fi

            if [ -n "$SIZE_JSON" ]; then
              # Copy to a known location with descriptive name
              mkdir -p build/size-analysis
              COMMIT_HASH="${{ steps.pr_info.outputs.short_sha }}"
              cp "$SIZE_JSON" "build/size-analysis/size_analysis_pr_${COMMIT_HASH}.json"
              echo "size_json=app/example/build/size-analysis/size_analysis_pr_${COMMIT_HASH}.json" >> $GITHUB_OUTPUT
              echo "✅ Size analysis saved as: size_analysis_pr_${COMMIT_HASH}.json"
            else
              echo "⚠️  Size analysis JSON not found"
            fi
          else
            echo "❌ APK build failed - file not found"
            exit 1
          fi
        id: build_apk

      - name: Generate Size Analysis Report
        if: steps.build_apk.outputs.size_json != ''
        run: |
          echo "Generating size analysis report..."
          chmod +x scripts/analyze_apk_size.sh
          ./scripts/analyze_apk_size.sh "${{ steps.build_apk.outputs.size_json }}" "${{ steps.build_apk.outputs.apk_path }}" apk_size_analysis.md
          echo "✅ APK analysis complete"
        id: analyze_apk

      - name: Download Cached Develop Size Analysis
        if: steps.build_apk.outputs.size_json != ''
        id: download_cached
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: develop-size-analysis-latest
          path: develop-artifact/

      - name: Check Cached Artifact
        if: steps.build_apk.outputs.size_json != ''
        id: check_cache
        run: |
          # Look for any size_analysis_develop_*.json file
          CACHED_JSON=$(find develop-artifact -name "size_analysis_develop_*.json" -type f 2>/dev/null | head -n 1)

          if [ -n "$CACHED_JSON" ] && [ -f "$CACHED_JSON" ]; then
            echo "✅ Found cached develop size analysis: $CACHED_JSON"
            echo "cache_exists=true" >> $GITHUB_OUTPUT
            echo "base_size_json=$CACHED_JSON" >> $GITHUB_OUTPUT
          else
            echo "⚠️  No cached develop size analysis found, will build from scratch"
            echo "cache_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Build Base Branch for Comparison
        if: steps.build_apk.outputs.size_json != '' && steps.check_cache.outputs.cache_exists != 'true'
        run: |
          echo "📦 Building base branch (develop) for size comparison..."
          echo "ℹ️  Cached artifact not available, building from develop branch"

          # Save current branch state
          git stash || true

          # Checkout base branch
          git fetch origin develop
          git checkout origin/develop

          cd app/example

          # Setup .env for base build
          if [ -n "${{ secrets.ENV_BASE64 }}" ]; then
            echo "${{ secrets.ENV_BASE64 }}" | base64 -d > .env
          else
            touch .env
          fi

          # Get dependencies
          flutter pub get

          # Run build_runner
          flutter pub run build_runner build --delete-conflicting-outputs || true

          # Clean build directory
          flutter clean

          # Build base APK with size analysis
          flutter build apk --analyze-size --target-platform android-arm64

          # Check for size analysis JSON
          echo "🔍 Searching for base size analysis JSON..."
          chmod +x ../../../scripts/ci/find_size_analysis_json.sh
          BASE_SIZE_JSON=$(../../../scripts/ci/find_size_analysis_json.sh . || echo "")

          if [ -n "$BASE_SIZE_JSON" ]; then
            echo "✅ Found base size analysis JSON: $(basename $BASE_SIZE_JSON)"
          else
            echo "⚠️  Base size analysis JSON not found"
          fi

          if [ -n "$BASE_SIZE_JSON" ]; then
            # Copy to a known location with descriptive name
            mkdir -p build/size-analysis
            cp "$BASE_SIZE_JSON" build/size-analysis/size_analysis_develop.json
            echo "base_size_json=app/example/build/size-analysis/size_analysis_develop.json" >> $GITHUB_OUTPUT
            echo "✅ Base size analysis saved as: size_analysis_develop.json"
          else
            echo "⚠️  Base size analysis JSON not found"
          fi

          # Return to PR branch
          cd ../..
          git checkout -
          git stash pop || true
        id: build_base
        env:
          ENV_BASE64: ${{ secrets.ENV_BASE64 }}

      - name: Determine Base Size JSON Path
        if: steps.build_apk.outputs.size_json != ''
        id: base_json_path
        run: |
          if [ "${{ steps.check_cache.outputs.cache_exists }}" = "true" ]; then
            echo "base_size_json=${{ steps.check_cache.outputs.base_size_json }}" >> $GITHUB_OUTPUT
            echo "source=cached" >> $GITHUB_OUTPUT
            echo "✅ Using cached develop size analysis"
          elif [ -n "${{ steps.build_base.outputs.base_size_json }}" ]; then
            echo "base_size_json=${{ steps.build_base.outputs.base_size_json }}" >> $GITHUB_OUTPUT
            echo "source=fresh_build" >> $GITHUB_OUTPUT
            echo "✅ Using freshly built size analysis"
          else
            echo "⚠️  No base size analysis available"
            echo "source=none" >> $GITHUB_OUTPUT
          fi

      - name: Compare SDK Size and Check Threshold
        if: steps.base_json_path.outputs.base_size_json != '' && steps.build_apk.outputs.size_json != ''
        id: size_comparison
        run: |
          echo "Comparing SDK size between base and PR..."

          # Install jq if needed
          if ! command -v jq &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y jq
          fi

          BASE_JSON="${{ steps.base_json_path.outputs.base_size_json }}"
          PR_JSON="${{ steps.build_apk.outputs.size_json }}"
          SOURCE="${{ steps.base_json_path.outputs.source }}"

          echo "📊 Size comparison source: $SOURCE"
          echo "  Base JSON: $BASE_JSON"
          echo "  PR JSON: $PR_JSON"

          # Use script to compare sizes
          chmod +x scripts/ci/compare_sdk_sizes.sh
          ./scripts/ci/compare_sdk_sizes.sh "$BASE_JSON" "$PR_JSON"

          # Extract file-level breakdown for detailed analysis
          echo "🔍 Extracting file-level size breakdown..."
          chmod +x scripts/ci/compare_file_sizes.sh
          FILE_CHANGES_RESULT=$(./scripts/ci/compare_file_sizes.sh "$BASE_JSON" "$PR_JSON" "size_file_changes.md")

          if [ "$FILE_CHANGES_RESULT" = "true" ]; then
            echo "file_changes_detected=true" >> $GITHUB_OUTPUT
            echo "✅ File-level changes detected"
          else
            echo "file_changes_detected=false" >> $GITHUB_OUTPUT
            echo "ℹ️  No file-level changes detected"
          fi

      - name: Upload Size Analysis JSONs
        if: steps.build_apk.outputs.size_json != ''
        uses: actions/upload-artifact@v4
        with:
          name: size-analysis-json-pr-${{ steps.pr_info.outputs.pr_number }}-${{ steps.pr_info.outputs.short_sha }}
          path: |
            ${{ steps.build_apk.outputs.size_json }}
            ${{ steps.base_json_path.outputs.base_size_json }}
          retention-days: 30

      - name: Upload APK as artifact
        uses: actions/upload-artifact@v4
        with:
          name: stadata-example-pr-${{ steps.pr_info.outputs.pr_number }}-${{ steps.pr_info.outputs.short_sha }}
          path: ${{ steps.build_apk.outputs.apk_path }}
          retention-days: 30

      - name: Get artifact download URL
        id: artifact_url
        run: |
          ARTIFACT_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "artifact_url=$ARTIFACT_URL" >> $GITHUB_OUTPUT

      - name: Comment PR with APK download link
        uses: actions/github-script@v7
        env:
          PR_NUMBER: ${{ steps.pr_info.outputs.pr_number }}
          BRANCH_NAME: ${{ steps.pr_info.outputs.branch_name }}
          COMMIT_SHA: ${{ steps.pr_info.outputs.short_sha }}
          APK_NAME: ${{ steps.pr_info.outputs.apk_name }}
          APK_SIZE: ${{ steps.build_apk.outputs.apk_size }}
          ARTIFACT_URL: ${{ steps.artifact_url.outputs.artifact_url }}
          RUN_ID: ${{ github.run_id }}
          SIZE_INCREASED: ${{ steps.size_comparison.outputs.size_increased }}
          REQUIRES_APPROVAL: ${{ steps.size_comparison.outputs.requires_approval }}
          SDK_SIZE_BASE_KB: ${{ steps.size_comparison.outputs.sdk_size_base_kb }}
          SDK_SIZE_PR_KB: ${{ steps.size_comparison.outputs.sdk_size_pr_kb }}
          SDK_SIZE_DIFF_KB: ${{ steps.size_comparison.outputs.sdk_size_diff_kb }}
          SDK_SIZE_DIFF_PCT: ${{ steps.size_comparison.outputs.sdk_size_diff_pct }}
          SDK_SIZE_DIFF: ${{ steps.size_comparison.outputs.sdk_size_diff }}
          COMPARISON_SOURCE: ${{ steps.base_json_path.outputs.source }}
          FILE_CHANGES_DETECTED: ${{ steps.size_comparison.outputs.file_changes_detected }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const script = require('./scripts/ci/github/post-apk-comment.js');
            await script({ github, context, core, fs });

      - name: Add Label and Request Review if Size Increased
        if: steps.size_comparison.outputs.requires_approval == 'true'
        uses: actions/github-script@v7
        env:
          PR_NUMBER: ${{ steps.pr_info.outputs.pr_number }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const script = require('./scripts/ci/github/add-size-labels.js');
            await script({ github, context });

      - name: Build summary
        if: always()
        run: |
          echo "## 📱 APK Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **PR Number**: #${{ steps.pr_info.outputs.pr_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ steps.pr_info.outputs.branch_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ steps.pr_info.outputs.short_sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **APK Name**: ${{ steps.pr_info.outputs.apk_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ job.status }}" = "success" ]; then
            echo "### ✅ Build Status" >> $GITHUB_STEP_SUMMARY
            echo "APK built successfully!" >> $GITHUB_STEP_SUMMARY
            echo "- **Size**: ${{ steps.build_apk.outputs.apk_size }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Artifact**: [Download APK](${{ steps.artifact_url.outputs.artifact_url }})" >> $GITHUB_STEP_SUMMARY
            echo "- **Retention**: 30 days" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Build Status" >> $GITHUB_STEP_SUMMARY
            echo "APK build failed!" >> $GITHUB_STEP_SUMMARY
          fi

  # Optional: Notify on build failure
  notify-failure:
    runs-on: ubuntu-latest
    needs: build-apk
    if: failure()
    permissions:
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Comment on failure
        uses: actions/github-script@v7
        env:
          PR_NUMBER: ${{ github.event.number }}
          RUN_ID: ${{ github.run_id }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const script = require('./scripts/ci/github/post-failure-comment.js');
            await script({ github, context });