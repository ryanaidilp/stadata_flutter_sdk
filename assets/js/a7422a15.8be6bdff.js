"use strict";(self.webpackChunkstadata_flutter_sdk=self.webpackChunkstadata_flutter_sdk||[]).push([[8884],{81:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"api-docs/list/static-tables","title":"Static Tables","description":"The Static Tables API provides access to structured statistical data tables from BPS (Badan Pusat Statistik) Indonesia. Static tables are pre-compiled data presentations that contain statistical information organized in tabular format, covering various statistical domains including demographics, economics, social indicators, and administrative data.","source":"@site/versioned_docs/version-0.8.0/api-docs/list/static-tables.md","sourceDirName":"api-docs/list","slug":"/api-docs/list/static-tables","permalink":"/stadata_flutter_sdk/docs/0.8.0/api-docs/list/static-tables","draft":false,"unlisted":false,"editUrl":"https://github.com/ryanaidilp/stadata_flutter_sdk/tree/main/docs/versioned_docs/version-0.8.0/api-docs/list/static-tables.md","tags":[],"version":"0.8.0","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Publications","permalink":"/stadata_flutter_sdk/docs/0.8.0/api-docs/list/publications"},"next":{"title":"Statistical Classification (KBLI & KBKI)","permalink":"/stadata_flutter_sdk/docs/0.8.0/api-docs/list/statistic-classifications"}}');var i=n(4848),l=n(8453);const s={},r="Static Tables",c={},d=[{value:"Understanding Static Tables",id:"understanding-static-tables",level:2},{value:"Table Organization Structure",id:"table-organization-structure",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"1. Get All Static Tables for a Domain",id:"1-get-all-static-tables-for-a-domain",level:3},{value:"2. Search Tables by Keyword",id:"2-search-tables-by-keyword",level:3},{value:"3. Filter Tables by Year and Month",id:"3-filter-tables-by-year-and-month",level:3},{value:"4. Browse Tables with Pagination",id:"4-browse-tables-with-pagination",level:3},{value:"5. Advanced Table Discovery and Analysis",id:"5-advanced-table-discovery-and-analysis",level:3},{value:"Properties (StaticTable)",id:"properties-statictable",level:2},{value:"Common Table Categories",id:"common-table-categories",level:2},{value:"Demographic Tables",id:"demographic-tables",level:3},{value:"Economic Tables",id:"economic-tables",level:3},{value:"Social Tables",id:"social-tables",level:3},{value:"Infrastructure Tables",id:"infrastructure-tables",level:3},{value:"Data Processing Workflow",id:"data-processing-workflow",level:2},{value:"Complete Table Discovery and Processing",id:"complete-table-discovery-and-processing",level:3},{value:"Integration with Other APIs",id:"integration-with-other-apis",level:2},{value:"Building Complete Data Reports",id:"building-complete-data-reports",level:3},{value:"Working with Table Files",id:"working-with-table-files",level:2},{value:"Excel File Processing",id:"excel-file-processing",level:3},{value:"HTML Table Preview",id:"html-table-preview",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Performance Considerations",id:"performance-considerations",level:2}];function o(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"static-tables",children:"Static Tables"})}),"\n",(0,i.jsx)(t.p,{children:"The Static Tables API provides access to structured statistical data tables from BPS (Badan Pusat Statistik) Indonesia. Static tables are pre-compiled data presentations that contain statistical information organized in tabular format, covering various statistical domains including demographics, economics, social indicators, and administrative data."}),"\n",(0,i.jsx)(t.p,{children:"These tables represent finalized statistical outputs that are regularly published by BPS offices at national, provincial, and regency/city levels. Static tables are essential resources for researchers, analysts, policymakers, and data journalists who need access to official statistical data in structured, downloadable formats."}),"\n",(0,i.jsx)(t.h2,{id:"understanding-static-tables",children:"Understanding Static Tables"}),"\n",(0,i.jsx)(t.p,{children:"Static tables serve as the primary data dissemination format for BPS statistics:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Official Data Publications"}),": Formally released statistical tables with verified data"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Time Series Data"}),": Historical data spanning multiple periods for trend analysis"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Cross-sectional Analysis"}),": Comparative data across regions, demographics, or categories"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Thematic Coverage"}),": Tables organized by statistical subjects and domains"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Multiple Formats"}),": Available in HTML display and Excel download formats"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"table-organization-structure",children:"Table Organization Structure"}),"\n",(0,i.jsx)(t.p,{children:"BPS static tables are systematically organized:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Domain Classification"}),": Tables grouped by geographic areas (national, provincial, local)"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Subject Categories"}),": Organized by statistical themes and topics"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Temporal Categorization"}),": Filtered by publication year and month"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Content Indexing"}),": Searchable by keywords and table titles"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Format Options"}),": HTML preview and Excel download capabilities"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Parameter"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"domain"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"String"})}),(0,i.jsxs)(t.td,{children:["Domain code (region) for retrieving static tables ",(0,i.jsx)(t.strong,{children:"(required)"})]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"lang"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"DataLanguage"})}),(0,i.jsxs)(t.td,{children:["Language for static table data (default: ",(0,i.jsx)(t.code,{children:"DataLanguage.id"}),")"]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"page"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"int"})}),(0,i.jsxs)(t.td,{children:["Page number (default: ",(0,i.jsx)(t.code,{children:"1"}),")"]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"keyword"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"String?"})}),(0,i.jsx)(t.td,{children:"Keyword for searching static tables (optional)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"month"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"int?"})}),(0,i.jsxs)(t.td,{children:["Month for filtering static tables (optional - ",(0,i.jsx)(t.code,{children:"1..12"}),")"]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"year"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"int?"})}),(0,i.jsx)(t.td,{children:"Year for filtering static tables (optional)"})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(t.h3,{id:"1-get-all-static-tables-for-a-domain",children:"1. Get All Static Tables for a Domain"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-dart",children:"// Fetch static tables from Central Java BPS\nfinal staticTableResult = await StadataFlutter.instance.list.staticTable(\n  domain: '3300', // Central Java domain code\n  lang: DataLanguage.id,\n);\n\nfinal staticTableList = staticTableResult.data;\nfinal pagination = staticTableResult.pagination;\n\n// Print pagination information\nprint('Current Page: ${pagination.page}');\nprint('Total Pages: ${pagination.pages}');\nprint('Data Count in This Page: ${pagination.count}');\nprint('Per Page: ${pagination.perPage}');\nprint('Total: ${pagination.total}');\nprint('------------------------');\n\n// Print retrieved static table data\nfor (final staticTable in staticTableList) {\n  print('Table ID: ${staticTable.id}');\n  print('Title: ${staticTable.title}');\n  print('Subject: ${staticTable.subject ?? 'Not specified'}');\n  print('Size: ${staticTable.size}');\n  print('Updated: ${staticTable.updatedAt}');\n  print('Excel Download: ${staticTable.excel}');\n  print('------------------------');\n}\n"})}),"\n",(0,i.jsx)(t.h3,{id:"2-search-tables-by-keyword",children:"2. Search Tables by Keyword"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-dart",children:"// Search for population-related static tables\nfinal populationTables = await StadataFlutter.instance.list.staticTable(\n  domain: '0000', // National level\n  lang: DataLanguage.id,\n  keyword: 'penduduk', // Search for population tables\n);\n\n// Process search results\nfor (final table in populationTables.data) {\n  print('Population Table: ${table.title}');\n  print('Subject: ${table.subject ?? 'General'}');\n  print('File Size: ${table.size}');\n  print('Last Updated: ${table.updatedAt}');\n  \n  // Check if Excel download is available\n  if (table.excel.isNotEmpty) {\n    print('Excel Download: ${table.excel}');\n  }\n  \n  // Preview HTML table content if available\n  if (table.table != null && table.table!.isNotEmpty) {\n    print('Has HTML preview available');\n  }\n  \n  print('------------------------');\n}\n"})}),"\n",(0,i.jsx)(t.h3,{id:"3-filter-tables-by-year-and-month",children:"3. Filter Tables by Year and Month"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-dart",children:"// Get static tables published in December 2023\nfinal recentTables = await StadataFlutter.instance.list.staticTable(\n  domain: '3200', // West Java\n  lang: DataLanguage.id,\n  year: 2023,\n  month: 12, // December\n);\n\n// Analyze recent publications\nprint('=== December 2023 Publications ===');\nfor (final table in recentTables.data) {\n  print('Recent Table: ${table.title}');\n  print('Subject Area: ${table.subject ?? 'Unspecified'}');\n  print('Created: ${table.createdAt ?? 'Unknown'}');\n  print('File Size: ${table.size}');\n  \n  // Calculate days since publication\n  if (table.createdAt != null) {\n    final daysSince = DateTime.now().difference(table.createdAt!).inDays;\n    print('Published $daysSince days ago');\n  }\n  \n  print('------------------------');\n}\n"})}),"\n",(0,i.jsx)(t.h3,{id:"4-browse-tables-with-pagination",children:"4. Browse Tables with Pagination"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-dart",children:"// Systematically browse through all available tables\nclass StaticTableBrowser {\n  static Future<void> browseAllTables(String domain) async {\n    int currentPage = 1;\n    bool hasMorePages = true;\n    final allTables = <StaticTable>[];\n    \n    while (hasMorePages) {\n      final pageResult = await StadataFlutter.instance.list.staticTable(\n        domain: domain,\n        lang: DataLanguage.id,\n        page: currentPage,\n      );\n      \n      allTables.addAll(pageResult.data);\n      print('Page $currentPage: ${pageResult.data.length} tables');\n      \n      hasMorePages = currentPage < pageResult.pagination.pages;\n      currentPage++;\n      \n      // Add delay to respect API rate limits\n      await Future.delayed(Duration(milliseconds: 500));\n    }\n    \n    print('Total tables collected: ${allTables.length}');\n    \n    // Analyze table distribution by subject\n    final subjectGroups = <String, int>{};\n    for (final table in allTables) {\n      final subject = table.subject ?? 'Unspecified';\n      subjectGroups[subject] = (subjectGroups[subject] ?? 0) + 1;\n    }\n    \n    print('\\\\n=== Tables by Subject ===');\n    subjectGroups.forEach((subject, count) {\n      print('$subject: $count tables');\n    });\n  }\n}\n"})}),"\n",(0,i.jsx)(t.h3,{id:"5-advanced-table-discovery-and-analysis",children:"5. Advanced Table Discovery and Analysis"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-dart",children:"// Comprehensive table analysis with multiple filters\nclass TableAnalyzer {\n  static Future<void> analyzeTableAvailability(String domain) async {\n    try {\n      // 1. Get overview of all tables\n      final allTables = await StadataFlutter.instance.list.staticTable(\n        domain: domain,\n        lang: DataLanguage.id,\n      );\n      \n      print('Total tables in domain $domain: ${allTables.pagination.total}');\n      \n      // 2. Analyze tables by year availability\n      final currentYear = DateTime.now().year;\n      final years = [currentYear - 2, currentYear - 1, currentYear];\n      \n      for (final year in years) {\n        final yearlyTables = await StadataFlutter.instance.list.staticTable(\n          domain: domain,\n          lang: DataLanguage.id,\n          year: year,\n        );\n        \n        print('$year: ${yearlyTables.pagination.total} tables');\n      }\n      \n      // 3. Search for economic data tables\n      final economicTables = await StadataFlutter.instance.list.staticTable(\n        domain: domain,\n        lang: DataLanguage.id,\n        keyword: 'ekonomi',\n      );\n      \n      print('Economic tables: ${economicTables.data.length}');\n      \n      // 4. Find largest tables by file size\n      final largeTables = allTables.data\n          .where((table) => table.size.contains('MB'))\n          .toList()\n        ..sort((a, b) => b.size.compareTo(a.size));\n      \n      print('\\\\n=== Largest Tables ===');\n      for (final table in largeTables.take(5)) {\n        print('${table.title} - ${table.size}');\n      }\n      \n    } catch (e) {\n      print('Error analyzing tables: $e');\n    }\n  }\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"properties-statictable",children:"Properties (StaticTable)"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Property"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"id"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"int"})}),(0,i.jsx)(t.td,{children:"Unique identifier of the static table"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"title"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"String"})}),(0,i.jsx)(t.td,{children:"Official title or name of the table"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"subjectId"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"int"})}),(0,i.jsx)(t.td,{children:"Subject identifier associated with the table"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"subject"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"String?"})}),(0,i.jsx)(t.td,{children:"Subject name or thematic category (optional)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"size"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"String"})}),(0,i.jsx)(t.td,{children:"File size of the table data"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"table"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"String?"})}),(0,i.jsx)(t.td,{children:"HTML representation of the table for preview (optional)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"updatedAt"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"DateTime"})}),(0,i.jsx)(t.td,{children:"Date and time when the table was last updated"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"createdAt"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"DateTime?"})}),(0,i.jsx)(t.td,{children:"Date and time when the table was created (optional)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"excel"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"String"})}),(0,i.jsx)(t.td,{children:"Direct download URL for the Excel version of the table"})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"common-table-categories",children:"Common Table Categories"}),"\n",(0,i.jsx)(t.h3,{id:"demographic-tables",children:"Demographic Tables"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Population Statistics"}),": Population counts, density, growth rates"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Migration Data"}),": Internal migration patterns, urbanization trends"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Household Demographics"}),": Family structure, household composition"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Vital Statistics"}),": Birth rates, death rates, life expectancy"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"economic-tables",children:"Economic Tables"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Regional GDP"}),": Gross regional domestic product by sector"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Employment Statistics"}),": Labor force, unemployment, employment by sector"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Investment Data"}),": Investment flows, capital formation"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Trade Statistics"}),": Regional trade balances, import/export data"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"social-tables",children:"Social Tables"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Education Statistics"}),": School enrollment, literacy rates, educational attainment"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Health Indicators"}),": Healthcare access, mortality rates, disease statistics"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Poverty and Welfare"}),": Poverty rates, social assistance programs"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Housing Data"}),": Housing conditions, access to utilities"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"infrastructure-tables",children:"Infrastructure Tables"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Transportation"}),": Road networks, public transport statistics"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Utilities"}),": Electricity, water supply, telecommunications coverage"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Technology Access"}),": Internet penetration, digital infrastructure"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"data-processing-workflow",children:"Data Processing Workflow"}),"\n",(0,i.jsx)(t.h3,{id:"complete-table-discovery-and-processing",children:"Complete Table Discovery and Processing"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-dart",children:"// Comprehensive workflow for table discovery and data extraction\nclass StaticTableProcessor {\n  static Future<void> processTableData() async {\n    try {\n      // 1. Discover tables for Jakarta\n      final jakartaTables = await StadataFlutter.instance.list.staticTable(\n        domain: '3100', // DKI Jakarta\n        lang: DataLanguage.id,\n        keyword: 'ekonomi',\n      );\n      \n      print('Found ${jakartaTables.data.length} economic tables for Jakarta');\n      \n      // 2. Select most recent table\n      final recentTables = jakartaTables.data\n        ..sort((a, b) => b.updatedAt.compareTo(a.updatedAt));\n      \n      if (recentTables.isNotEmpty) {\n        final latestTable = recentTables.first;\n        print('Latest economic table: ${latestTable.title}');\n        print('Last updated: ${latestTable.updatedAt}');\n        print('File size: ${latestTable.size}');\n        \n        // 3. Process table content\n        if (latestTable.table != null) {\n          print('HTML preview available');\n          // Parse HTML content for data extraction\n          await processHTMLTable(latestTable.table!);\n        }\n        \n        // 4. Download Excel version\n        if (latestTable.excel.isNotEmpty) {\n          print('Excel download: ${latestTable.excel}');\n          await downloadExcelFile(latestTable.excel, latestTable.title);\n        }\n      }\n      \n    } catch (e) {\n      print('Error processing table data: $e');\n    }\n  }\n  \n  static Future<void> processHTMLTable(String htmlContent) async {\n    // Process HTML table content\n    print('Processing HTML table data...');\n    // Implementation for HTML parsing would go here\n  }\n  \n  static Future<void> downloadExcelFile(String url, String title) async {\n    // Download Excel file implementation\n    print('Downloading Excel file: $title');\n    // Implementation for file download would go here\n  }\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"integration-with-other-apis",children:"Integration with Other APIs"}),"\n",(0,i.jsx)(t.h3,{id:"building-complete-data-reports",children:"Building Complete Data Reports"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-dart",children:"// Combine static tables with other BPS data sources\nFuture<void> buildComprehensiveReport(String domain) async {\n  try {\n    // Get domain information\n    final domains = await StadataFlutter.instance.list.domains();\n    final currentDomain = domains.data.firstWhere((d) => d.id == domain);\n    \n    // Get static tables\n    final tables = await StadataFlutter.instance.list.staticTable(\n      domain: domain,\n      lang: DataLanguage.id,\n    );\n    \n    // Get related publications\n    final publications = await StadataFlutter.instance.list.publications(\n      domain: domain,\n      lang: DataLanguage.id,\n    );\n    \n    // Get strategic indicators\n    final indicators = await StadataFlutter.instance.list.strategicIndicators(\n      domain: domain,\n      lang: DataLanguage.id,\n    );\n    \n    print('=== Comprehensive Report for ${currentDomain.name} ===');\n    print('Static Tables: ${tables.data.length}');\n    print('Publications: ${publications.data.length}');\n    print('Strategic Indicators: ${indicators.data.length}');\n    \n    // Analyze data availability by subject\n    final tableSubjects = <String, int>{};\n    for (final table in tables.data) {\n      final subject = table.subject ?? 'Unspecified';\n      tableSubjects[subject] = (tableSubjects[subject] ?? 0) + 1;\n    }\n    \n    print('\\\\n=== Data Coverage by Subject ===');\n    tableSubjects.forEach((subject, count) {\n      print('$subject: $count tables');\n    });\n    \n  } catch (e) {\n    print('Report generation error: $e');\n  }\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"working-with-table-files",children:"Working with Table Files"}),"\n",(0,i.jsx)(t.h3,{id:"excel-file-processing",children:"Excel File Processing"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-dart",children:"// Download and process Excel files from static tables\nFuture<void> processExcelData() async {\n  try {\n    final tables = await StadataFlutter.instance.list.staticTable(\n      domain: '3200', // West Java\n      lang: DataLanguage.id,\n      keyword: 'penduduk',\n    );\n    \n    for (final table in tables.data.take(3)) {\n      print('Processing: ${table.title}');\n      print('Excel URL: ${table.excel}');\n      print('File Size: ${table.size}');\n      \n      // Validate Excel URL before download\n      if (table.excel.isNotEmpty && table.excel.startsWith('http')) {\n        print('Valid Excel download URL available');\n        \n        // Here you would implement actual file download\n        // using packages like dio, http, or flutter_downloader\n        \n      } else {\n        print('No valid Excel download available');\n      }\n      \n      print('------------------------');\n    }\n    \n  } catch (e) {\n    print('Excel processing error: $e');\n  }\n}\n"})}),"\n",(0,i.jsx)(t.h3,{id:"html-table-preview",children:"HTML Table Preview"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-dart",children:"// Display HTML table content in Flutter apps\nWidget buildTablePreview(StaticTable table) {\n  return Column(\n    crossAxisAlignment: CrossAxisAlignment.start,\n    children: [\n      Text(\n        table.title,\n        style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\n      ),\n      SizedBox(height: 8),\n      Text('Subject: ${table.subject ?? 'Not specified'}'),\n      Text('Size: ${table.size}'),\n      Text('Updated: ${table.updatedAt}'),\n      SizedBox(height: 12),\n      \n      // Display HTML table if available\n      if (table.table != null && table.table!.isNotEmpty)\n        Container(\n          height: 300,\n          decoration: BoxDecoration(\n            border: Border.all(color: Colors.grey),\n            borderRadius: BorderRadius.circular(4),\n          ),\n          child: SingleChildScrollView(\n            child: Html(\n              data: table.table!,\n              // Configure HTML display options\n            ),\n          ),\n        ),\n      \n      SizedBox(height: 12),\n      \n      // Download button\n      if (table.excel.isNotEmpty)\n        ElevatedButton.icon(\n          onPressed: () => downloadTable(table.excel),\n          icon: Icon(Icons.download),\n          label: Text('Download Excel'),\n        ),\n    ],\n  );\n}\n\nFuture<void> downloadTable(String url) async {\n  // Implement table download functionality\n  print('Downloading table from: $url');\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsxs)(t.p,{children:["Static Table API methods return ",(0,i.jsx)(t.code,{children:"Future<ListResult<StaticTable>>"})," and may throw specific exceptions:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"StaticTableException"}),": Static table-related errors (invalid domain, search errors)"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"ApiException"}),": Network or API-related errors"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"ApiKeyNotFoundException"}),": Invalid or missing API key"]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-dart",children:"try {\n  final result = await StadataFlutter.instance.list.staticTable(\n    domain: '3200',\n    keyword: 'ekonomi',\n    year: 2023,\n  );\n  \n  // Process successful result\n  print('Found ${result.data.length} static tables');\n  \n} on StaticTableException catch (e) {\n  print('Static table error: ${e.message}');\n  // Handle domain validation errors or search issues\n  \n} on ApiException catch (e) {\n  print('API error: ${e.message}');\n  // Handle network connectivity or API service errors\n  \n} catch (e) {\n  print('Unexpected error: $e');\n  // Handle any other unexpected errors\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"File Size Awareness"}),": Check table sizes before downloading large Excel files"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Pagination Strategy"}),": Use pagination for domains with many tables"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Search Optimization"}),": Use specific keywords to reduce result sets"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Caching"}),": Cache frequently accessed tables locally"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Download Management"}),": Implement proper download queuing for multiple Excel files"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"HTML Processing"}),": Optimize HTML table rendering for large tables"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>r});var a=n(6540);const i={},l=a.createContext(i);function s(e){const t=a.useContext(l);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(l.Provider,{value:t},e.children)}}}]);