"use strict";(self.webpackChunkstadata_flutter_sdk=self.webpackChunkstadata_flutter_sdk||[]).push([[7485],{4308:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"api-docs/list/domains","title":"Domains","description":"The Domains API provides access to the administrative regions (domains) available in the BPS (Badan Pusat Statistik) Indonesia data system. These domains represent the geographic organizational structure of Indonesia\'s statistical data collection, ranging from national level to provincial and regency levels.","source":"@site/docs/api-docs/list/domains.md","sourceDirName":"api-docs/list","slug":"/api-docs/list/domains","permalink":"/stadata_flutter_sdk/docs/api-docs/list/domains","draft":false,"unlisted":false,"editUrl":"https://github.com/ryanaidilp/stadata_flutter_sdk/tree/main/docs/docs/api-docs/list/domains.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Census","permalink":"/stadata_flutter_sdk/docs/api-docs/list/census"},"next":{"title":"Infographics","permalink":"/stadata_flutter_sdk/docs/api-docs/list/infographics"}}');var t=i(4848),s=i(8453);const r={},d="Domains",l={},c=[{value:"Available Domain Types",id:"available-domain-types",level:2},{value:"Domain Type Options",id:"domain-type-options",level:3},{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"1. Get All Available Domains",id:"1-get-all-available-domains",level:3},{value:"2. Get Provincial Domains Only",id:"2-get-provincial-domains-only",level:3},{value:"3. Get Regencies in a Specific Province",id:"3-get-regencies-in-a-specific-province",level:3},{value:"Properties (DomainEntity)",id:"properties-domainentity",level:2},{value:"Common Domain Codes",id:"common-domain-codes",level:2},{value:"National and Special Regions",id:"national-and-special-regions",level:3},{value:"Major Provinces",id:"major-provinces",level:3},{value:"Major Cities (Regency Level)",id:"major-cities-regency-level",level:3},{value:"Usage Workflow",id:"usage-workflow",level:2},{value:"Complete Example",id:"complete-example",level:3},{value:"Administrative Structure Context",id:"administrative-structure-context",level:2},{value:"Error Handling",id:"error-handling",level:2}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"domains",children:"Domains"})}),"\n",(0,t.jsx)(n.p,{children:"The Domains API provides access to the administrative regions (domains) available in the BPS (Badan Pusat Statistik) Indonesia data system. These domains represent the geographic organizational structure of Indonesia's statistical data collection, ranging from national level to provincial and regency levels."}),"\n",(0,t.jsx)(n.p,{children:"Understanding domains is crucial for accessing BPS data, as most other API endpoints require a domain code to specify which geographic region's data you want to retrieve. Each domain corresponds to a BPS regional office that collects and manages statistical data for their respective areas."}),"\n",(0,t.jsx)(n.h2,{id:"available-domain-types",children:"Available Domain Types"}),"\n",(0,t.jsx)(n.p,{children:"The domains functionality provides several filtering options to retrieve specific types of administrative regions:"}),"\n",(0,t.jsx)(n.h3,{id:"domain-type-options",children:"Domain Type Options"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Use Case"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"DomainType.all"})}),(0,t.jsx)(n.td,{children:"All available domains"}),(0,t.jsx)(n.td,{children:"Get complete list of all BPS offices"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"DomainType.province"})}),(0,t.jsx)(n.td,{children:"Provincial level domains only"}),(0,t.jsx)(n.td,{children:"Access provincial statistical data"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"DomainType.regency"})}),(0,t.jsx)(n.td,{children:"All regency/city level domains"}),(0,t.jsx)(n.td,{children:"Access local government statistical data"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"DomainType.regencyByProvince"})}),(0,t.jsx)(n.td,{children:"Regencies within a specific province"}),(0,t.jsx)(n.td,{children:"Filter local domains by province"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"DomainType"})}),(0,t.jsxs)(n.td,{children:["The type of domain to retrieve (default: ",(0,t.jsx)(n.code,{children:"DomainType.all"}),")"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"provinceCode"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"String?"})}),(0,t.jsxs)(n.td,{children:["The province code for filtering domains ",(0,t.jsxs)(n.strong,{children:["(required if type = ",(0,t.jsx)(n.code,{children:"DomainType.regencyByProvince"}),")"]})]})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(n.h3,{id:"1-get-all-available-domains",children:"1. Get All Available Domains"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// Fetch all domains from BPS\nfinal domainResult = await StadataFlutter.instance.list.domains(\n  type: DomainType.all,\n);\n\nfinal domainList = domainResult.data;\nfinal pagination = domainResult.pagination;\n\n// Print pagination info\nprint('Current Page: ${pagination.page}');\nprint('Total Pages: ${pagination.pages}');\nprint('Data Count in This Page: ${pagination.count}');\nprint('Per Page: ${pagination.perPage}');\nprint('Total: ${pagination.total}');\nprint('------------------------');\n\n// Print the retrieved domain data\nfor (final domain in domainList) {\n  print('Domain ID: ${domain.id}'); // Ex. 0000 (National), 3200 (West Java)\n  print('Name: ${domain.name}'); // Ex. Indonesia, Jawa Barat\n  print('URL: ${domain.url}'); // Ex. https://www.bps.go.id, https://jabar.bps.go.id\n  print('------------------------');\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-get-provincial-domains-only",children:"2. Get Provincial Domains Only"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// Fetch only provincial level domains\nfinal provincialResult = await StadataFlutter.instance.list.domains(\n  type: DomainType.province,\n);\n\n// Access provincial BPS offices\nfor (final province in provincialResult.data) {\n  print('Province Code: ${province.id}'); // Ex. 3200, 3300, 7300\n  print('Province Name: ${province.name}'); // Ex. Jawa Barat, Jawa Tengah, Sulawesi Selatan\n  print('BPS Office URL: ${province.url}');\n  print('------------------------');\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"3-get-regencies-in-a-specific-province",children:"3. Get Regencies in a Specific Province"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// Fetch regencies/cities in West Java (code: 3200)\nfinal regencyResult = await StadataFlutter.instance.list.domains(\n  type: DomainType.regencyByProvince,\n  provinceCode: '3200', // West Java province code\n);\n\n// Access regency/city BPS offices\nfor (final regency in regencyResult.data) {\n  print('Regency Code: ${regency.id}'); // Ex. 3201, 3202, 3271\n  print('Regency Name: ${regency.name}'); // Ex. Kab. Bogor, Kab. Sukabumi, Kota Bogor\n  print('BPS Office URL: ${regency.url}');\n  print('------------------------');\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"properties-domainentity",children:"Properties (DomainEntity)"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Property"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"id"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"String"})}),(0,t.jsx)(n.td,{children:"Unique identifier for the domain (BPS code)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"name"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"String"})}),(0,t.jsx)(n.td,{children:"The name of the domain (region)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"url"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"String"})}),(0,t.jsx)(n.td,{children:"URL of the BPS office website for this domain"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"common-domain-codes",children:"Common Domain Codes"}),"\n",(0,t.jsx)(n.p,{children:"Here are some frequently used domain codes for reference:"}),"\n",(0,t.jsx)(n.h3,{id:"national-and-special-regions",children:"National and Special Regions"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Domain Code"}),(0,t.jsx)(n.th,{children:"Name"}),(0,t.jsx)(n.th,{children:"Level"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"0000"})}),(0,t.jsx)(n.td,{children:"Indonesia"}),(0,t.jsx)(n.td,{children:"National"})]})})]}),"\n",(0,t.jsx)(n.h3,{id:"major-provinces",children:"Major Provinces"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Domain Code"}),(0,t.jsx)(n.th,{children:"Name"}),(0,t.jsx)(n.th,{children:"Capital"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"1100"})}),(0,t.jsx)(n.td,{children:"Aceh"}),(0,t.jsx)(n.td,{children:"Banda Aceh"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"1200"})}),(0,t.jsx)(n.td,{children:"Sumatera Utara"}),(0,t.jsx)(n.td,{children:"Medan"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"3100"})}),(0,t.jsx)(n.td,{children:"DKI Jakarta"}),(0,t.jsx)(n.td,{children:"Jakarta"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"3200"})}),(0,t.jsx)(n.td,{children:"Jawa Barat"}),(0,t.jsx)(n.td,{children:"Bandung"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"3300"})}),(0,t.jsx)(n.td,{children:"Jawa Tengah"}),(0,t.jsx)(n.td,{children:"Semarang"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"3400"})}),(0,t.jsx)(n.td,{children:"DI Yogyakarta"}),(0,t.jsx)(n.td,{children:"Yogyakarta"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"3500"})}),(0,t.jsx)(n.td,{children:"Jawa Timur"}),(0,t.jsx)(n.td,{children:"Surabaya"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"5100"})}),(0,t.jsx)(n.td,{children:"Bali"}),(0,t.jsx)(n.td,{children:"Denpasar"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"7300"})}),(0,t.jsx)(n.td,{children:"Sulawesi Selatan"}),(0,t.jsx)(n.td,{children:"Makassar"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"major-cities-regency-level",children:"Major Cities (Regency Level)"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Domain Code"}),(0,t.jsx)(n.th,{children:"Name"}),(0,t.jsx)(n.th,{children:"Province"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"3171"})}),(0,t.jsx)(n.td,{children:"Kota Jakarta Selatan"}),(0,t.jsx)(n.td,{children:"DKI Jakarta"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"3271"})}),(0,t.jsx)(n.td,{children:"Kota Bogor"}),(0,t.jsx)(n.td,{children:"Jawa Barat"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"3372"})}),(0,t.jsx)(n.td,{children:"Kota Surakarta"}),(0,t.jsx)(n.td,{children:"Jawa Tengah"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"3471"})}),(0,t.jsx)(n.td,{children:"Kota Yogyakarta"}),(0,t.jsx)(n.td,{children:"DI Yogyakarta"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"3578"})}),(0,t.jsx)(n.td,{children:"Kota Surabaya"}),(0,t.jsx)(n.td,{children:"Jawa Timur"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"usage-workflow",children:"Usage Workflow"}),"\n",(0,t.jsx)(n.p,{children:"The typical workflow for using domains with other BPS API endpoints:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Discover Available Domains"}),": Use ",(0,t.jsx)(n.code,{children:"domains()"})," to see what geographic regions are available"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Select Target Region"}),": Choose the appropriate domain code based on your data needs"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use Domain Code"}),": Pass the domain code to other API endpoints (publications, news, static tables, etc.)"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"complete-example",children:"Complete Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// 1. Get all available domains\nfinal allDomains = await StadataFlutter.instance.list.domains();\nprint('Total Available Domains: ${allDomains.data.length}');\n\n// 2. Filter for a specific province (West Java)\nfinal westJavaRegencies = await StadataFlutter.instance.list.domains(\n  type: DomainType.regencyByProvince,\n  provinceCode: '3200',\n);\nprint('Regencies in West Java: ${westJavaRegencies.data.length}');\n\n// 3. Use domain code with other APIs\nfinal publications = await StadataFlutter.instance.list.publications(\n  domain: '3200', // Use West Java domain code\n  lang: DataLanguage.id,\n);\nprint('Publications from West Java BPS: ${publications.data.length}');\n"})}),"\n",(0,t.jsx)(n.h2,{id:"administrative-structure-context",children:"Administrative Structure Context"}),"\n",(0,t.jsx)(n.p,{children:"Indonesia's administrative structure consists of:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"National Level"})," (",(0,t.jsx)(n.code,{children:"0000"}),"): Central BPS Indonesia"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Provincial Level"})," (",(0,t.jsx)(n.code,{children:"XX00"}),"): 34 provinces, each with a BPS provincial office"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Regency/City Level"})," (",(0,t.jsx)(n.code,{children:"XXXX"}),"): 514+ regencies and cities, each with a local BPS office"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Each level collects and manages statistical data relevant to their administrative scope. Understanding this hierarchy helps in selecting the appropriate domain for your data needs."}),"\n",(0,t.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsxs)(n.p,{children:["All domain methods return a ",(0,t.jsx)(n.code,{children:"Future<ListResult<Domain>>"})," and may throw specific exceptions:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"DomainException"}),": Domain-related errors (invalid province code, etc.)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ApiException"}),": Network or API-related errors"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ApiKeyNotFoundException"}),": Invalid or missing API key"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"try {\n  final result = await StadataFlutter.instance.list.domains(\n    type: DomainType.regencyByProvince,\n    provinceCode: '3200',\n  );\n  // Handle success\n  print('Found ${result.data.length} regencies in the province');\n} on DomainException catch (e) {\n  print('Domain error: ${e.message}');\n  // Handle invalid province codes or domain-specific errors\n} on ApiException catch (e) {\n  print('API error: ${e.message}');\n  // Handle network or API-related errors\n} catch (e) {\n  print('Unexpected error: $e');\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>d});var a=i(6540);const t={},s=a.createContext(t);function r(e){const n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);