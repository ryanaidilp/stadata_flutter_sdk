"use strict";(self.webpackChunkstadata_flutter_sdk=self.webpackChunkstadata_flutter_sdk||[]).push([[7216],{6240:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"api-docs/list/census","title":"Census","description":"The Census API provides access to census data from BPS (Badan Pusat Statistik) Indonesia. Census data includes comprehensive demographic, housing, agricultural, and economic surveys conducted periodically by BPS.","source":"@site/docs/api-docs/list/census.md","sourceDirName":"api-docs/list","slug":"/api-docs/list/census","permalink":"/stadata_flutter_sdk/docs/api-docs/list/census","draft":false,"unlisted":false,"editUrl":"https://github.com/ryanaidilp/stadata_flutter_sdk/tree/main/docs/docs/api-docs/list/census.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Intro","permalink":"/stadata_flutter_sdk/docs/api-docs/list/intro"},"next":{"title":"Domains","permalink":"/stadata_flutter_sdk/docs/api-docs/list/domains"}}');var i=n(4848),r=n(8453);const a={},d="Census",c={},l=[{value:"Available Methods",id:"available-methods",level:2},{value:"1. <code>census()</code> - Get All Census Types",id:"1-census---get-all-census-types",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Example",id:"example",level:4},{value:"Properties (Census)",id:"properties-census",level:4},{value:"2. <code>censusTopics()</code> - Get Topics for a Census",id:"2-censustopics---get-topics-for-a-census",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Example",id:"example-1",level:4},{value:"Properties (CensusTopic)",id:"properties-censustopic",level:4},{value:"3. <code>censusEventAreas()</code> - Get Areas for a Census",id:"3-censuseventareas---get-areas-for-a-census",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Example",id:"example-2",level:4},{value:"Properties (CensusArea)",id:"properties-censusarea",level:4},{value:"4. <code>censusEventDatasets()</code> - Get Datasets for Census and Topic",id:"4-censuseventdatasets---get-datasets-for-census-and-topic",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Example",id:"example-3",level:4},{value:"Properties (CensusDataset)",id:"properties-censusdataset",level:4},{value:"5. <code>censusData()</code> - Get Actual Census Data",id:"5-censusdata---get-actual-census-data",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Example",id:"example-4",level:4},{value:"Properties (CensusData)",id:"properties-censusdata",level:4},{value:"Properties (CensusCategory)",id:"properties-censuscategory",level:4},{value:"Common Census IDs",id:"common-census-ids",level:2},{value:"Usage Workflow",id:"usage-workflow",level:2},{value:"Complete Example",id:"complete-example",level:3},{value:"Error Handling",id:"error-handling",level:2}];function o(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"census",children:"Census"})}),"\n",(0,i.jsx)(s.p,{children:"The Census API provides access to census data from BPS (Badan Pusat Statistik) Indonesia. Census data includes comprehensive demographic, housing, agricultural, and economic surveys conducted periodically by BPS."}),"\n",(0,i.jsx)(s.h2,{id:"available-methods",children:"Available Methods"}),"\n",(0,i.jsx)(s.p,{children:"The census functionality provides five methods for accessing different levels of census data:"}),"\n",(0,i.jsxs)(s.h3,{id:"1-census---get-all-census-types",children:["1. ",(0,i.jsx)(s.code,{children:"census()"})," - Get All Census Types"]}),"\n",(0,i.jsx)(s.p,{children:"Retrieves a list of all available census types from BPS."}),"\n",(0,i.jsx)(s.h4,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsx)(s.p,{children:"This method takes no parameters."}),"\n",(0,i.jsx)(s.h4,{id:"example",children:"Example"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-dart",children:"// Fetch all available census types\nfinal censusResult = await StadataFlutter.instance.list.census();\n\nfinal censusList = censusResult.data;\nfinal pagination = censusResult.pagination;\n\n// Print pagination info\nprint('Current Page: ${pagination.page}');\nprint('Total Pages: ${pagination.pages}');\nprint('Data Count in This Page: ${pagination.count}');\nprint('Per Page: ${pagination.perPage}');\nprint('Total: ${pagination.total}');\nprint('------------------------');\n\n// Print the retrieved census data\nfor (final census in censusList) {\n  print('Census ID: ${census.id}'); // Ex. sp2020\n  print('Name: ${census.name}'); // Ex. Sensus Penduduk 2020\n  print('------------------------');\n}\n"})}),"\n",(0,i.jsx)(s.h4,{id:"properties-census",children:"Properties (Census)"}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Property"}),(0,i.jsx)(s.th,{children:"Type"}),(0,i.jsx)(s.th,{children:"Description"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"id"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"String"})}),(0,i.jsx)(s.td,{children:"Unique identifier for the census"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"name"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"String"})}),(0,i.jsx)(s.td,{children:"The name of the census"})]})]})]}),"\n",(0,i.jsxs)(s.h3,{id:"2-censustopics---get-topics-for-a-census",children:["2. ",(0,i.jsx)(s.code,{children:"censusTopics()"})," - Get Topics for a Census"]}),"\n",(0,i.jsx)(s.p,{children:"Retrieves available topics for a specific census event."}),"\n",(0,i.jsx)(s.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Parameter"}),(0,i.jsx)(s.th,{children:"Type"}),(0,i.jsx)(s.th,{children:"Description"})]})}),(0,i.jsx)(s.tbody,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"censusID"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"String"})}),(0,i.jsxs)(s.td,{children:["The ID of the census (e.g., 'sp2020') ",(0,i.jsx)(s.strong,{children:"(required)"})]})]})})]}),"\n",(0,i.jsx)(s.h4,{id:"example-1",children:"Example"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-dart",children:"// Fetch topics for Population Census 2020\nfinal topicsResult = await StadataFlutter.instance.list.censusTopics(\n  censusID: 'sp2020',\n);\n\nfinal topicsList = topicsResult.data;\nfinal pagination = topicsResult.pagination;\n\n// Print pagination info\nprint('Current Page: ${pagination.page}');\nprint('Total Pages: ${pagination.pages}');\nprint('Data Count in This Page: ${pagination.count}');\nprint('Per Page: ${pagination.perPage}');\nprint('Total: ${pagination.total}');\nprint('------------------------');\n\n// Print the retrieved census topics\nfor (final topic in topicsList) {\n  print('Topic ID: ${topic.id}'); // Ex. 20\n  print('Name: ${topic.name}'); // Ex. Demografi\n  print('------------------------');\n}\n"})}),"\n",(0,i.jsx)(s.h4,{id:"properties-censustopic",children:"Properties (CensusTopic)"}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Property"}),(0,i.jsx)(s.th,{children:"Type"}),(0,i.jsx)(s.th,{children:"Description"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"id"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"int"})}),(0,i.jsx)(s.td,{children:"Unique identifier for the topic"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"name"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"String"})}),(0,i.jsx)(s.td,{children:"The name of the census topic"})]})]})]}),"\n",(0,i.jsxs)(s.h3,{id:"3-censuseventareas---get-areas-for-a-census",children:["3. ",(0,i.jsx)(s.code,{children:"censusEventAreas()"})," - Get Areas for a Census"]}),"\n",(0,i.jsx)(s.p,{children:"Retrieves geographical areas that have data for a specific census event."}),"\n",(0,i.jsx)(s.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Parameter"}),(0,i.jsx)(s.th,{children:"Type"}),(0,i.jsx)(s.th,{children:"Description"})]})}),(0,i.jsx)(s.tbody,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"censusID"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"String"})}),(0,i.jsxs)(s.td,{children:["The ID of the census (e.g., 'sp2020') ",(0,i.jsx)(s.strong,{children:"(required)"})]})]})})]}),"\n",(0,i.jsx)(s.h4,{id:"example-2",children:"Example"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-dart",children:"// Fetch areas for Population Census 2020\nfinal areasResult = await StadataFlutter.instance.list.censusEventAreas(\n  censusID: 'sp2020',\n);\n\nfinal areasList = areasResult.data;\nfinal pagination = areasResult.pagination;\n\n// Print pagination info\nprint('Current Page: ${pagination.page}');\nprint('Total Pages: ${pagination.pages}');\nprint('Data Count in This Page: ${pagination.count}');\nprint('Per Page: ${pagination.perPage}');\nprint('Total: ${pagination.total}');\nprint('------------------------');\n\n// Print the retrieved census areas\nfor (final area in areasList) {\n  print('Area ID: ${area.id}'); // Ex. 3200\n  print('Name: ${area.name}'); // Ex. Jawa Barat\n  print('Level: ${area.level}'); // Ex. 1 (Province level)\n  print('------------------------');\n}\n"})}),"\n",(0,i.jsx)(s.h4,{id:"properties-censusarea",children:"Properties (CensusArea)"}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Property"}),(0,i.jsx)(s.th,{children:"Type"}),(0,i.jsx)(s.th,{children:"Description"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"id"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"String"})}),(0,i.jsx)(s.td,{children:"Unique identifier for the area"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"name"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"String"})}),(0,i.jsx)(s.td,{children:"The name of the area"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"level"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"int"})}),(0,i.jsx)(s.td,{children:"Administrative level (1=Province, 2=Regency, etc.)"})]})]})]}),"\n",(0,i.jsxs)(s.h3,{id:"4-censuseventdatasets---get-datasets-for-census-and-topic",children:["4. ",(0,i.jsx)(s.code,{children:"censusEventDatasets()"})," - Get Datasets for Census and Topic"]}),"\n",(0,i.jsx)(s.p,{children:"Retrieves actual datasets for a specific combination of census event and topic."}),"\n",(0,i.jsx)(s.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Parameter"}),(0,i.jsx)(s.th,{children:"Type"}),(0,i.jsx)(s.th,{children:"Description"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"censusID"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"String"})}),(0,i.jsxs)(s.td,{children:["The ID of the census (e.g., 'sp2020') ",(0,i.jsx)(s.strong,{children:"(required)"})]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"topicID"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"int"})}),(0,i.jsxs)(s.td,{children:["The ID of the topic (e.g., 20) ",(0,i.jsx)(s.strong,{children:"(required)"})]})]})]})]}),"\n",(0,i.jsx)(s.h4,{id:"example-3",children:"Example"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-dart",children:"// Fetch datasets for Population Census 2020, Demographics topic\nfinal datasetsResult = await StadataFlutter.instance.list.censusEventDatasets(\n  censusID: 'sp2020',\n  topicID: 20,\n);\n\nfinal datasetsList = datasetsResult.data;\nfinal pagination = datasetsResult.pagination;\n\n// Print pagination info\nprint('Current Page: ${pagination.page}');\nprint('Total Pages: ${pagination.pages}');\nprint('Data Count in This Page: ${pagination.count}');\nprint('Per Page: ${pagination.perPage}');\nprint('Total: ${pagination.total}');\nprint('------------------------');\n\n// Print the retrieved census datasets\nfor (final dataset in datasetsList) {\n  print('Dataset ID: ${dataset.id}'); // Ex. 123456\n  print('Title: ${dataset.title}'); // Ex. Jumlah Penduduk Menurut Jenis Kelamin\n  print('Description: ${dataset.description}');\n  print('Updated At: ${dataset.updatedAt}');\n  print('------------------------');\n}\n"})}),"\n",(0,i.jsx)(s.h4,{id:"properties-censusdataset",children:"Properties (CensusDataset)"}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Property"}),(0,i.jsx)(s.th,{children:"Type"}),(0,i.jsx)(s.th,{children:"Description"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"id"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"int"})}),(0,i.jsx)(s.td,{children:"Unique identifier for the dataset"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"title"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"String"})}),(0,i.jsx)(s.td,{children:"The title of the dataset"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"description"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"String?"})}),(0,i.jsx)(s.td,{children:"Description of the dataset (optional)"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"updatedAt"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"DateTime"})}),(0,i.jsx)(s.td,{children:"Last update timestamp of the dataset"})]})]})]}),"\n",(0,i.jsxs)(s.h3,{id:"5-censusdata---get-actual-census-data",children:["5. ",(0,i.jsx)(s.code,{children:"censusData()"})," - Get Actual Census Data"]}),"\n",(0,i.jsx)(s.p,{children:"Retrieves the actual statistical data for a specific combination of census event, area, and dataset. This method provides access to the detailed census figures with categories, indicators, and values."}),"\n",(0,i.jsx)(s.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Parameter"}),(0,i.jsx)(s.th,{children:"Type"}),(0,i.jsx)(s.th,{children:"Description"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"censusID"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"String"})}),(0,i.jsxs)(s.td,{children:["The ID of the census (e.g., 'sp2020') ",(0,i.jsx)(s.strong,{children:"(required)"})]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"censusAreaID"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"String"})}),(0,i.jsxs)(s.td,{children:["The ID of the census area ",(0,i.jsx)(s.strong,{children:"(required)"})]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"datasetID"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"String"})}),(0,i.jsxs)(s.td,{children:["The ID of the dataset ",(0,i.jsx)(s.strong,{children:"(required)"})]})]})]})]}),"\n",(0,i.jsx)(s.h4,{id:"example-4",children:"Example"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-dart",children:"// Fetch actual census data for Population Census 2020\n// for Indonesia (area ID: 1667) and specific dataset\nfinal censusDataResult = await StadataFlutter.instance.list.censusData(\n  censusID: 'sp2020',\n  censusAreaID: '1667', // Indonesia\n  datasetID: '1',\n);\n\nfinal censusDataList = censusDataResult.data;\nfinal pagination = censusDataResult.pagination;\n\n// Print pagination info\nprint('Current Page: ${pagination.page}');\nprint('Total Pages: ${pagination.pages}');\nprint('Data Count in This Page: ${pagination.count}');\nprint('Per Page: ${pagination.perPage}');\nprint('Total: ${pagination.total}');\nprint('------------------------');\n\n// Print the retrieved census data\nfor (final data in censusDataList) {\n  print('Region: ${data.regionName} (${data.regionCode})');\n  print('Indicator: ${data.indicatorName}');\n  print('Period: ${data.period}');\n  print('Value: ${data.value}');\n  \n  // Print categories if available\n  if (data.categories.isNotEmpty) {\n    print('Categories:');\n    for (final category in data.categories) {\n      print('  - ${category.name}: ${category.itemName} (${category.itemCode})');\n    }\n  }\n  print('------------------------');\n}\n"})}),"\n",(0,i.jsx)(s.h4,{id:"properties-censusdata",children:"Properties (CensusData)"}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Property"}),(0,i.jsx)(s.th,{children:"Type"}),(0,i.jsx)(s.th,{children:"Description"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"regionID"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"String"})}),(0,i.jsx)(s.td,{children:"Unique identifier for the region"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"regionCode"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"String"})}),(0,i.jsx)(s.td,{children:"Code for the region"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"regionName"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"String"})}),(0,i.jsx)(s.td,{children:"Name of the region"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"regionLevel"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"String?"})}),(0,i.jsx)(s.td,{children:"Administrative level of the region (optional)"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"indicatorID"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"String"})}),(0,i.jsx)(s.td,{children:"Unique identifier for the indicator"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"indicatorName"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"String"})}),(0,i.jsx)(s.td,{children:"Name of the statistical indicator"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"categories"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"List<CensusCategory>"})}),(0,i.jsx)(s.td,{children:"List of categories for the data"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"period"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"String"})}),(0,i.jsx)(s.td,{children:"Time period of the data"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"value"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"num"})}),(0,i.jsx)(s.td,{children:"The statistical value"})]})]})]}),"\n",(0,i.jsx)(s.h4,{id:"properties-censuscategory",children:"Properties (CensusCategory)"}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Property"}),(0,i.jsx)(s.th,{children:"Type"}),(0,i.jsx)(s.th,{children:"Description"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"id"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"String"})}),(0,i.jsx)(s.td,{children:"Unique identifier for the category"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"name"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"String"})}),(0,i.jsx)(s.td,{children:"Name of the category"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"itemID"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"String"})}),(0,i.jsx)(s.td,{children:"Unique identifier for the item"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"itemCode"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"String"})}),(0,i.jsx)(s.td,{children:"Code for the item"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"itemName"})}),(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"String"})}),(0,i.jsx)(s.td,{children:"Name of the item"})]})]})]}),"\n",(0,i.jsx)(s.h2,{id:"common-census-ids",children:"Common Census IDs"}),"\n",(0,i.jsx)(s.p,{children:"Here are some commonly used census IDs:"}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Census ID"}),(0,i.jsx)(s.th,{children:"Description"}),(0,i.jsx)(s.th,{children:"Year"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"sp2020"})}),(0,i.jsx)(s.td,{children:"Sensus Penduduk (Population Census)"}),(0,i.jsx)(s.td,{children:"2020"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"st2023"})}),(0,i.jsx)(s.td,{children:"Sensus Pertanian (Agricultural Census)"}),(0,i.jsx)(s.td,{children:"2023"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"se2016"})}),(0,i.jsx)(s.td,{children:"Sensus Ekonomi (Economic Census)"}),(0,i.jsx)(s.td,{children:"2016"})]})]})]}),"\n",(0,i.jsx)(s.h2,{id:"usage-workflow",children:"Usage Workflow"}),"\n",(0,i.jsx)(s.p,{children:"The typical workflow for accessing census data follows this hierarchy:"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Get Available Census Types"}),": Use ",(0,i.jsx)(s.code,{children:"census()"})," to see what census events are available"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Get Topics for a Census"}),": Use ",(0,i.jsx)(s.code,{children:"censusTopics(censusID)"})," to see what topics are available for your chosen census"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Get Areas for a Census"}),": Use ",(0,i.jsx)(s.code,{children:"censusEventAreas(censusID)"})," to see what geographical areas have data"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Get Datasets"}),": Use ",(0,i.jsx)(s.code,{children:"censusEventDatasets(censusID, topicID)"})," to get the actual datasets you can query"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Get Census Data"}),": Use ",(0,i.jsx)(s.code,{children:"censusData(censusID, censusAreaID, datasetID)"})," to get the actual statistical data"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"complete-example",children:"Complete Example"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-dart",children:"// 1. Get all available census types\nfinal censusTypes = await StadataFlutter.instance.list.census();\nprint('Available Census Types: ${censusTypes.data.length}');\n\n// 2. Get topics for Population Census 2020\nfinal topics = await StadataFlutter.instance.list.censusTopics(\n  censusID: 'sp2020',\n);\nprint('Topics for SP2020: ${topics.data.length}');\n\n// 3. Get areas for Population Census 2020\nfinal areas = await StadataFlutter.instance.list.censusEventAreas(\n  censusID: 'sp2020',\n);\nprint('Areas for SP2020: ${areas.data.length}');\n\n// 4. Get datasets for Population Census 2020, Demographics topic\nfinal datasets = await StadataFlutter.instance.list.censusEventDatasets(\n  censusID: 'sp2020',\n  topicID: 20, // Demographics topic ID\n);\nprint('Datasets for SP2020 Demographics: ${datasets.data.length}');\n\n// 5. Get actual census data\nfinal censusData = await StadataFlutter.instance.list.censusData(\n  censusID: 'sp2020',\n  censusAreaID: '1667', // Indonesia\n  datasetID: '1',\n);\nprint('Census Data Records: ${censusData.data.length}');\n\n// Display first record\nif (censusData.data.isNotEmpty) {\n  final firstRecord = censusData.data.first;\n  print('Sample Data: ${firstRecord.indicatorName} = ${firstRecord.value}');\n}\n"})}),"\n",(0,i.jsx)(s.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsxs)(s.p,{children:["All census methods return a ",(0,i.jsx)(s.code,{children:"Future<ListResult<T>>"})," and may throw specific exceptions:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"CensusDataException"}),": General census data errors"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"CensusTopicException"}),": Census topic-related errors"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"CensusAreaException"}),": Census area-related errors"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"CensusDatasetException"}),": Census dataset-related errors"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"ApiException"}),": Network or API-related errors"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"ApiKeyNotFoundException"}),": Invalid or missing API key"]}),"\n"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-dart",children:"try {\n  final result = await StadataFlutter.instance.list.censusData(\n    censusID: 'sp2020',\n    censusAreaID: '1667',\n    datasetID: '1',\n  );\n  // Handle success\n} on CensusDataException catch (e) {\n  print('Census data error: ${e.message}');\n} on ApiException catch (e) {\n  print('API error: ${e.message}');\n} catch (e) {\n  print('Unexpected error: $e');\n}\n"})})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>d});var t=n(6540);const i={},r=t.createContext(i);function a(e){const s=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);