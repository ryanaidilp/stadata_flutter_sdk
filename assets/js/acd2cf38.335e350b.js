"use strict";(self.webpackChunkstadata_flutter_sdk=self.webpackChunkstadata_flutter_sdk||[]).push([[4571],{795:(a,i,e)=>{e.r(i),e.d(i,{assets:()=>o,contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"api-docs/list/vertical-variables","title":"Vertical Variables","description":"The Vertical Variables API provides access to specialized variable structures used by BPS (Badan Pusat Statistik) Indonesia for organizing complex hierarchical data relationships. Vertical variables represent a sophisticated classification system that enables multi-dimensional data analysis by organizing variables in vertical relationship structures that reflect real-world hierarchical connections.","source":"@site/docs/api-docs/list/vertical-variables.md","sourceDirName":"api-docs/list","slug":"/api-docs/list/vertical-variables","permalink":"/stadata_flutter_sdk/docs/api-docs/list/vertical-variables","draft":false,"unlisted":false,"editUrl":"https://github.com/ryanaidilp/stadata_flutter_sdk/tree/main/docs/docs/api-docs/list/vertical-variables.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Variables","permalink":"/stadata_flutter_sdk/docs/api-docs/list/variables"},"next":{"title":"View API","permalink":"/stadata_flutter_sdk/docs/category/view-api"}}');var r=e(4848),t=e(8453);const l={},s="Vertical Variables",o={},c=[{value:"Understanding BPS Vertical Variables",id:"understanding-bps-vertical-variables",level:2},{value:"Vertical Variable System Structure",id:"vertical-variable-system-structure",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"1. Get All Vertical Variables for a Domain",id:"1-get-all-vertical-variables-for-a-domain",level:3},{value:"2. Filter Vertical Variables by Variable ID",id:"2-filter-vertical-variables-by-variable-id",level:3},{value:"3. Explore Vertical Variable Groups",id:"3-explore-vertical-variable-groups",level:3},{value:"4. Analyze Vertical Variable Hierarchies",id:"4-analyze-vertical-variable-hierarchies",level:3},{value:"5. Build Vertical Variable Navigation System",id:"5-build-vertical-variable-navigation-system",level:3},{value:"Properties (VerticalVariable)",id:"properties-verticalvariable",level:2},{value:"Common Vertical Variable Patterns",id:"common-vertical-variable-patterns",level:2},{value:"Hierarchical Economic Indicators",id:"hierarchical-economic-indicators",level:3},{value:"Administrative Structure Variables",id:"administrative-structure-variables",level:3},{value:"Demographic Classification Variables",id:"demographic-classification-variables",level:3},{value:"Vertical Variable Discovery Workflow",id:"vertical-variable-discovery-workflow",level:2},{value:"Complete Vertical Variable Analysis Example",id:"complete-vertical-variable-analysis-example",level:3},{value:"Integration with Other APIs",id:"integration-with-other-apis",level:2},{value:"Using Vertical Variables for Enhanced Data Analysis",id:"using-vertical-variables-for-enhanced-data-analysis",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Performance Considerations",id:"performance-considerations",level:2}];function d(a){const i={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...a.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.header,{children:(0,r.jsx)(i.h1,{id:"vertical-variables",children:"Vertical Variables"})}),"\n",(0,r.jsx)(i.p,{children:"The Vertical Variables API provides access to specialized variable structures used by BPS (Badan Pusat Statistik) Indonesia for organizing complex hierarchical data relationships. Vertical variables represent a sophisticated classification system that enables multi-dimensional data analysis by organizing variables in vertical relationship structures that reflect real-world hierarchical connections."}),"\n",(0,r.jsx)(i.p,{children:"Vertical variables are essential for understanding layered data relationships in Indonesian statistics, particularly in complex domains such as economic indicators, administrative hierarchies, and demographic classifications. These variables enable researchers and analysts to explore data across multiple organizational levels simultaneously."}),"\n",(0,r.jsx)(i.h2,{id:"understanding-bps-vertical-variables",children:"Understanding BPS Vertical Variables"}),"\n",(0,r.jsx)(i.p,{children:"Vertical variables provide structured access to hierarchical data relationships:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Hierarchical Organization"}),": Variables organized in parent-child and group relationships"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Multi-Level Analysis"}),": Support for analysis across different organizational levels"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Group Classification"}),": Systematic grouping of related variables for comprehensive analysis"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Dimensional Mapping"}),": Framework for understanding complex data dimensions and relationships"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Analytical Flexibility"}),": Support for both drill-down and roll-up analytical operations"]}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"vertical-variable-system-structure",children:"Vertical Variable System Structure"}),"\n",(0,r.jsx)(i.p,{children:"BPS vertical variables are designed to handle complex data relationships:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Variable Hierarchy"}),": Multi-level variable organization with clear parent-child relationships"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Group Classifications"}),": Systematic grouping of variables by thematic and functional criteria"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Item Specifications"}),": Detailed item-level organization within variable groups"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Cross-Dimensional Links"}),": Relationships that span across different data dimensions"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Analytical Contexts"}),": Support for different analytical perspectives and use cases"]}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(i.table,{children:[(0,r.jsx)(i.thead,{children:(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.th,{children:"Parameter"}),(0,r.jsx)(i.th,{children:"Type"}),(0,r.jsx)(i.th,{children:"Description"})]})}),(0,r.jsxs)(i.tbody,{children:[(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"domain"})}),(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"String"})}),(0,r.jsxs)(i.td,{children:["Domain code (region) to retrieve vertical variables ",(0,r.jsx)(i.strong,{children:"(required)"})]})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"lang"})}),(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"DataLanguage"})}),(0,r.jsxs)(i.td,{children:["Language for vertical variables data (default: ",(0,r.jsx)(i.code,{children:"DataLanguage.id"}),")"]})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"page"})}),(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"int"})}),(0,r.jsxs)(i.td,{children:["Page number (default: ",(0,r.jsx)(i.code,{children:"1"}),")"]})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"variableID"})}),(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"int?"})}),(0,r.jsx)(i.td,{children:"Variable ID to filter vertical variables (optional)"})]})]})]}),"\n",(0,r.jsx)(i.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(i.h3,{id:"1-get-all-vertical-variables-for-a-domain",children:"1. Get All Vertical Variables for a Domain"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-dart",children:"// Fetch vertical variables from Central Java BPS\nfinal verticalVariablesResult = await StadataFlutter.instance.list.verticalVariables(\n  domain: '3300', // Central Java domain code\n  lang: DataLanguage.id,\n);\n\nfinal variables = verticalVariablesResult.data;\nfinal pagination = verticalVariablesResult.pagination;\n\n// Print pagination information\nprint('Current Page: ${pagination.page}');\nprint('Total Pages: ${pagination.pages}');\nprint('Data Count in This Page: ${pagination.count}');\nprint('Per Page: ${pagination.perPage}');\nprint('Total: ${pagination.total}');\nprint('------------------------');\n\n// Print retrieved vertical variables data\nfor (final variable in variables) {\n  print('Vertical Variable ID: ${variable.id}');\n  print('Title: ${variable.title}');\n  print('Item ID: ${variable.itemID}');\n  print('Group ID: ${variable.groupID ?? 'No group'}');\n  print('Group Name: ${variable.groupName ?? 'Ungrouped'}');\n  print('------------------------');\n}\n"})}),"\n",(0,r.jsx)(i.h3,{id:"2-filter-vertical-variables-by-variable-id",children:"2. Filter Vertical Variables by Variable ID"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-dart",children:"// Get vertical variables associated with a specific variable\nfinal specificVerticalVars = await StadataFlutter.instance.list.verticalVariables(\n  domain: '0000', // National level\n  lang: DataLanguage.id,\n  variableID: 2501, // Example variable ID for economic indicators\n);\n\n// Analyze variable-specific vertical structures\nprint('=== Vertical Variables for Variable 2501 ===');\nfor (final verticalVar in specificVerticalVars.data) {\n  print('Vertical Variable: ${verticalVar.title}');\n  print('Variable ID: ${verticalVar.id}');\n  print('Item ID: ${verticalVar.itemID}');\n  \n  // Analyze group relationships\n  if (verticalVar.groupID != null && verticalVar.groupName != null) {\n    print('Group: ${verticalVar.groupName} (ID: ${verticalVar.groupID})');\n    print('  Type: Grouped vertical variable');\n  } else {\n    print('  Type: Independent vertical variable');\n  }\n  \n  print('------------------------');\n}\n"})}),"\n",(0,r.jsx)(i.h3,{id:"3-explore-vertical-variable-groups",children:"3. Explore Vertical Variable Groups"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-dart",children:"// Analyze vertical variable grouping patterns across domains\nclass VerticalVariableGroupExplorer {\n  static Future<void> exploreGroupStructures() async {\n    final domains = ['0000', '3100', '3200', '3300']; // National, Jakarta, West Java, Central Java\n    final domainGroups = <String, Map<String, List<VerticalVariable>>>{};\n    \n    for (final domain in domains) {\n      final variables = await StadataFlutter.instance.list.verticalVariables(\n        domain: domain,\n        lang: DataLanguage.id,\n      );\n      \n      // Group variables by their group names\n      final groupedVars = <String, List<VerticalVariable>>{};\n      for (final variable in variables.data) {\n        final groupName = variable.groupName ?? 'Ungrouped';\n        groupedVars[groupName] = (groupedVars[groupName] ?? [])..add(variable);\n      }\n      \n      domainGroups[domain] = groupedVars;\n      \n      await Future.delayed(Duration(milliseconds: 300));\n    }\n    \n    print('=== Vertical Variable Group Analysis ===');\n    for (final entry in domainGroups.entries) {\n      print('Domain ${entry.key}:');\n      print('  Total Groups: ${entry.value.keys.length}');\n      \n      final sortedGroups = entry.value.entries.toList()\n        ..sort((a, b) => b.value.length.compareTo(a.value.length));\n      \n      print('  Top Groups by Variable Count:');\n      for (final groupEntry in sortedGroups.take(5)) {\n        print('    ${groupEntry.key}: ${groupEntry.value.length} variables');\n        \n        // Show sample variable titles\n        final sampleTitles = groupEntry.value.take(2).map((v) => v.title).join(', ');\n        print('      Sample: $sampleTitles');\n      }\n      \n      print('---');\n    }\n  }\n}\n"})}),"\n",(0,r.jsx)(i.h3,{id:"4-analyze-vertical-variable-hierarchies",children:"4. Analyze Vertical Variable Hierarchies"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-dart",children:"// Comprehensive analysis of vertical variable hierarchical structures\nclass VerticalVariableHierarchyAnalyzer {\n  static Future<void> analyzeHierarchicalStructures(String domain) async {\n    try {\n      // 1. Get all vertical variables for the domain\n      final allVerticalVars = await StadataFlutter.instance.list.verticalVariables(\n        domain: domain,\n        lang: DataLanguage.id,\n      );\n      \n      print('=== Vertical Variable Hierarchy Analysis ===');\n      print('Total Vertical Variables: ${allVerticalVars.data.length}');\n      \n      // 2. Analyze group distribution\n      final groupDistribution = <String, List<VerticalVariable>>{};\n      final ungroupedVariables = <VerticalVariable>[];\n      \n      for (final variable in allVerticalVars.data) {\n        if (variable.groupName != null && variable.groupName!.isNotEmpty) {\n          final groupName = variable.groupName!;\n          groupDistribution[groupName] = (groupDistribution[groupName] ?? [])..add(variable);\n        } else {\n          ungroupedVariables.add(variable);\n        }\n      }\n      \n      print('Grouped Variables: ${groupDistribution.length} groups');\n      print('Ungrouped Variables: ${ungroupedVariables.length}');\n      \n      // 3. Analyze group hierarchies\n      for (final entry in groupDistribution.entries) {\n        final groupName = entry.key;\n        final variables = entry.value;\n        \n        print('\\\\n=== Group: $groupName ===');\n        print('Variables in group: ${variables.length}');\n        \n        // Analyze item ID patterns\n        final itemIds = variables.map((v) => v.itemID).toSet();\n        print('Unique item IDs: ${itemIds.length}');\n        \n        // Check for hierarchical patterns\n        final groupIds = variables\n            .where((v) => v.groupID != null)\n            .map((v) => v.groupID!)\n            .toSet();\n        \n        if (groupIds.length > 1) {\n          print('Multiple group IDs detected: $groupIds');\n          print('  \u2192 Complex hierarchical structure');\n        } else if (groupIds.length == 1) {\n          print('Single group ID: ${groupIds.first}');\n          print('  \u2192 Simple group structure');\n        }\n        \n        // Show sample variables\n        print('Sample variables:');\n        for (final variable in variables.take(3)) {\n          print('  \u2022 ${variable.title} (Item: ${variable.itemID})');\n        }\n      }\n      \n      // 4. Cross-group relationship analysis\n      print('\\\\n=== Cross-Group Analysis ===');\n      final allGroupIds = groupDistribution.values\n          .expand((vars) => vars)\n          .where((v) => v.groupID != null)\n          .map((v) => v.groupID!)\n          .toSet();\n      \n      print('Unique group IDs across all groups: ${allGroupIds.length}');\n      \n      // Find groups that share item IDs\n      final itemIdGroups = <int, List<String>>{};\n      for (final entry in groupDistribution.entries) {\n        for (final variable in entry.value) {\n          itemIdGroups[variable.itemID] = (itemIdGroups[variable.itemID] ?? [])..add(entry.key);\n        }\n      }\n      \n      final sharedItemIds = itemIdGroups.entries\n          .where((entry) => entry.value.length > 1)\n          .length;\n      \n      print('Item IDs shared across groups: $sharedItemIds');\n      if (sharedItemIds > 0) {\n        print('  \u2192 Cross-group relationships detected');\n      }\n      \n    } catch (e) {\n      print('Hierarchy analysis error: $e');\n    }\n  }\n}\n"})}),"\n",(0,r.jsx)(i.h3,{id:"5-build-vertical-variable-navigation-system",children:"5. Build Vertical Variable Navigation System"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-dart",children:"// Create a comprehensive navigation system for vertical variables\nclass VerticalVariableNavigationBuilder {\n  static Future<Map<String, dynamic>> buildNavigationStructure(String domain) async {\n    final navigationStructure = <String, dynamic>{};\n    \n    try {\n      // Get all vertical variables\n      final variables = await StadataFlutter.instance.list.verticalVariables(\n        domain: domain,\n        lang: DataLanguage.id,\n      );\n      \n      navigationStructure['domain'] = domain;\n      navigationStructure['totalVariables'] = variables.data.length;\n      navigationStructure['groups'] = <Map<String, dynamic>>[];\n      \n      // Group variables by group name\n      final groupedVars = <String, List<VerticalVariable>>{};\n      for (final variable in variables.data) {\n        final groupName = variable.groupName ?? 'Ungrouped';\n        groupedVars[groupName] = (groupedVars[groupName] ?? [])..add(variable);\n      }\n      \n      // Build navigation for each group\n      for (final entry in groupedVars.entries) {\n        final groupName = entry.key;\n        final groupVariables = entry.value;\n        \n        // Build group node\n        final groupNode = <String, dynamic>{\n          'groupName': groupName,\n          'variableCount': groupVariables.length,\n          'variables': <Map<String, dynamic>>[],\n        };\n        \n        // Get unique group IDs for this group\n        final groupIds = groupVariables\n            .where((v) => v.groupID != null)\n            .map((v) => v.groupID!)\n            .toSet();\n        \n        groupNode['groupIds'] = groupIds.toList();\n        \n        // Add variables to group\n        for (final variable in groupVariables) {\n          groupNode['variables'].add({\n            'id': variable.id,\n            'title': variable.title,\n            'itemID': variable.itemID,\n            'groupID': variable.groupID,\n          });\n        }\n        \n        // Calculate group statistics\n        final uniqueItemIds = groupVariables.map((v) => v.itemID).toSet();\n        groupNode['uniqueItemIds'] = uniqueItemIds.length;\n        \n        (navigationStructure['groups'] as List<Map<String, dynamic>>).add(groupNode);\n      }\n      \n      // Calculate navigation statistics\n      final allGroups = navigationStructure['groups'] as List<Map<String, dynamic>>;\n      final groupsWithMultipleIds = allGroups\n          .where((group) => (group['groupIds'] as List).length > 1)\n          .length;\n      \n      navigationStructure['groupsWithMultipleIds'] = groupsWithMultipleIds;\n      navigationStructure['totalGroups'] = allGroups.length;\n      \n      // Print navigation summary\n      print('=== Vertical Variable Navigation Summary ===');\n      print('Domain: $domain');\n      print('Total Variables: ${navigationStructure['totalVariables']}');\n      print('Total Groups: ${navigationStructure['totalGroups']}');\n      print('Groups with Multiple IDs: $groupsWithMultipleIds');\n      print('');\n      \n      // Print group breakdown\n      for (final group in allGroups) {\n        print('\ud83d\udcc1 ${group['groupName']}');\n        print('   Variables: ${group['variableCount']}');\n        print('   Unique Item IDs: ${group['uniqueItemIds']}');\n        print('   Group IDs: ${(group['groupIds'] as List).join(', ')}');\n        print('');\n      }\n      \n      return navigationStructure;\n      \n    } catch (e) {\n      print('Navigation building error: $e');\n      return {};\n    }\n  }\n}\n"})}),"\n",(0,r.jsx)(i.h2,{id:"properties-verticalvariable",children:"Properties (VerticalVariable)"}),"\n",(0,r.jsxs)(i.table,{children:[(0,r.jsx)(i.thead,{children:(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.th,{children:"Property"}),(0,r.jsx)(i.th,{children:"Type"}),(0,r.jsx)(i.th,{children:"Description"})]})}),(0,r.jsxs)(i.tbody,{children:[(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"id"})}),(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"int"})}),(0,r.jsx)(i.td,{children:"Unique identifier for the vertical variable"})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"title"})}),(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"String"})}),(0,r.jsx)(i.td,{children:"Descriptive title or label of the vertical variable"})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"itemID"})}),(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"int"})}),(0,r.jsx)(i.td,{children:"Specific item identifier within the vertical variable structure"})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"groupID"})}),(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"int?"})}),(0,r.jsx)(i.td,{children:"Group identifier for hierarchical organization (optional)"})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"groupName"})}),(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"String?"})}),(0,r.jsx)(i.td,{children:"Name of the group containing this vertical variable (optional)"})]})]})]}),"\n",(0,r.jsx)(i.h2,{id:"common-vertical-variable-patterns",children:"Common Vertical Variable Patterns"}),"\n",(0,r.jsx)(i.h3,{id:"hierarchical-economic-indicators",children:"Hierarchical Economic Indicators"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Sector Classifications"}),": Variables organized by economic sectors and sub-sectors"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Regional Hierarchies"}),": Variables structured by administrative levels (national, provincial, regency)"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Temporal Classifications"}),": Variables organized by time periods and frequencies"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Industry Groupings"}),": Variables categorized by industrial classifications"]}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"administrative-structure-variables",children:"Administrative Structure Variables"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Government Levels"}),": Variables organized by administrative hierarchy"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Department Classifications"}),": Variables grouped by government departments and agencies"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Service Categories"}),": Variables structured by public service types"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Policy Domains"}),": Variables organized by policy areas and implementation levels"]}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"demographic-classification-variables",children:"Demographic Classification Variables"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Population Segments"}),": Variables organized by demographic characteristics"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Geographic Classifications"}),": Variables structured by geographic and administrative boundaries"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Social Categories"}),": Variables grouped by social and economic classifications"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Household Types"}),": Variables organized by household and family structures"]}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"vertical-variable-discovery-workflow",children:"Vertical Variable Discovery Workflow"}),"\n",(0,r.jsx)(i.p,{children:"The typical workflow for working with vertical variables:"}),"\n",(0,r.jsxs)(i.ol,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Domain Exploration"}),": Discover available vertical variables for a domain"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Group Analysis"}),": Understand variable groupings and hierarchical structures"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Relationship Mapping"}),": Identify relationships between variables and groups"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Hierarchical Navigation"}),": Use group structures for efficient data exploration"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Multi-Dimensional Analysis"}),": Leverage vertical structures for comprehensive analysis"]}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"complete-vertical-variable-analysis-example",children:"Complete Vertical Variable Analysis Example"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-dart",children:"// Comprehensive vertical variable analysis and utilization system\nclass VerticalVariableAnalysisSystem {\n  static Future<void> performCompleteAnalysis() async {\n    try {\n      // 1. Multi-domain vertical variable discovery\n      final domains = ['0000', '3100', '3200']; // National, Jakarta, West Java\n      final domainAnalysis = <String, Map<String, dynamic>>{};\n      \n      for (final domain in domains) {\n        final variables = await StadataFlutter.instance.list.verticalVariables(\n          domain: domain,\n          lang: DataLanguage.id,\n        );\n        \n        // Analyze variable distribution\n        final groupDistribution = <String, int>{};\n        final itemIdRange = <int>[];\n        \n        for (final variable in variables.data) {\n          final groupName = variable.groupName ?? 'Ungrouped';\n          groupDistribution[groupName] = (groupDistribution[groupName] ?? 0) + 1;\n          itemIdRange.add(variable.itemID);\n        }\n        \n        itemIdRange.sort();\n        \n        domainAnalysis[domain] = {\n          'totalVariables': variables.data.length,\n          'groupCount': groupDistribution.keys.length,\n          'groupDistribution': groupDistribution,\n          'itemIdRange': {\n            'min': itemIdRange.isNotEmpty ? itemIdRange.first : 0,\n            'max': itemIdRange.isNotEmpty ? itemIdRange.last : 0,\n          },\n        };\n        \n        await Future.delayed(Duration(milliseconds: 200));\n      }\n      \n      // 2. Cross-domain comparison\n      print('=== Cross-Domain Vertical Variable Analysis ===');\n      for (final entry in domainAnalysis.entries) {\n        final domain = entry.key;\n        final analysis = entry.value;\n        \n        print('Domain $domain:');\n        print('  Total Variables: ${analysis['totalVariables']}');\n        print('  Groups: ${analysis['groupCount']}');\n        \n        final itemRange = analysis['itemIdRange'] as Map<String, int>;\n        print('  Item ID Range: ${itemRange['min']} - ${itemRange['max']}');\n        \n        final groupDist = analysis['groupDistribution'] as Map<String, int>;\n        final topGroups = groupDist.entries.toList()\n          ..sort((a, b) => b.value.compareTo(a.value));\n        \n        if (topGroups.isNotEmpty) {\n          print('  Top Group: ${topGroups.first.key} (${topGroups.first.value} variables)');\n        }\n        \n        print('');\n      }\n      \n      // 3. Variable relationship analysis\n      print('=== Variable Relationship Recommendations ===');\n      final nationalData = domainAnalysis['0000'];\n      if (nationalData != null) {\n        final groupCount = nationalData['groupCount'] as int;\n        final totalVars = nationalData['totalVariables'] as int;\n        \n        if (groupCount > 0) {\n          final avgVarsPerGroup = totalVars / groupCount;\n          print('National level analysis:');\n          print('  Average variables per group: ${avgVarsPerGroup.toStringAsFixed(1)}');\n          \n          if (avgVarsPerGroup > 10) {\n            print('  Recommendation: High variable density - suitable for detailed analysis');\n          } else if (avgVarsPerGroup > 5) {\n            print('  Recommendation: Moderate density - good for comparative analysis');\n          } else {\n            print('  Recommendation: Low density - suitable for overview analysis');\n          }\n        }\n        \n        final itemRange = nationalData['itemIdRange'] as Map<String, int>;\n        final rangeSize = itemRange['max']! - itemRange['min']!;\n        print('  Item ID span: $rangeSize');\n        \n        if (rangeSize > 1000) {\n          print('  Recommendation: Wide range - implement efficient pagination');\n        }\n      }\n      \n    } catch (e) {\n      print('Complete analysis error: $e');\n    }\n  }\n}\n"})}),"\n",(0,r.jsx)(i.h2,{id:"integration-with-other-apis",children:"Integration with Other APIs"}),"\n",(0,r.jsx)(i.h3,{id:"using-vertical-variables-for-enhanced-data-analysis",children:"Using Vertical Variables for Enhanced Data Analysis"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-dart",children:"// Integrate vertical variables with other BPS data sources for comprehensive analysis\nFuture<void> integrateVerticalVariablesWithData(String domain) async {\n  try {\n    // Get vertical variables for context\n    final verticalVars = await StadataFlutter.instance.list.verticalVariables(\n      domain: domain,\n      lang: DataLanguage.id,\n    );\n    \n    // Get regular variables for comparison\n    final regularVars = await StadataFlutter.instance.list.variables(\n      domain: domain,\n      lang: DataLanguage.id,\n    );\n    \n    print('=== Variable Integration Analysis ===');\n    print('Vertical Variables: ${verticalVars.data.length}');\n    print('Regular Variables: ${regularVars.data.length}');\n    \n    // Analyze relationships between vertical and regular variables\n    final verticalVarIds = verticalVars.data.map((v) => v.id).toSet();\n    final regularVarIds = regularVars.data.map((v) => v.id).toSet();\n    \n    final commonIds = verticalVarIds.intersection(regularVarIds);\n    print('Common Variable IDs: ${commonIds.length}');\n    \n    if (commonIds.isNotEmpty) {\n      print('Integration opportunities detected:');\n      for (final id in commonIds.take(5)) {\n        final verticalVar = verticalVars.data.firstWhere((v) => v.id == id);\n        final regularVar = regularVars.data.firstWhere((v) => v.id == id);\n        \n        print('  Variable ID $id:');\n        print('    Vertical: ${verticalVar.title}');\n        print('    Regular: ${regularVar.title}');\n        print('    Group: ${verticalVar.groupName ?? 'None'}');\n      }\n    }\n    \n    // Get static tables for data context\n    final staticTables = await StadataFlutter.instance.list.staticTable(\n      domain: domain,\n      lang: DataLanguage.id,\n    );\n    \n    print('\\\\nStatic Tables Available: ${staticTables.data.length}');\n    print('\u2192 Use vertical variable groups to organize table analysis');\n    print('\u2192 Apply hierarchical variable structures to table data interpretation');\n    \n  } catch (e) {\n    print('Integration analysis error: $e');\n  }\n}\n"})}),"\n",(0,r.jsx)(i.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsxs)(i.p,{children:["Vertical Variables API methods return ",(0,r.jsx)(i.code,{children:"Future<ListResult<VerticalVariable>>"})," and may throw specific exceptions:"]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"VerticalVariableException"}),": Vertical variable-related errors (invalid domain, variable ID errors)"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"ApiException"}),": Network or API-related errors"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"ApiKeyNotFoundException"}),": Invalid or missing API key"]}),"\n"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-dart",children:"try {\n  final result = await StadataFlutter.instance.list.verticalVariables(\n    domain: '3200',\n    variableID: 2501,\n    lang: DataLanguage.id,\n  );\n  \n  // Process successful result\n  print('Found ${result.data.length} vertical variables');\n  \n} on VerticalVariableException catch (e) {\n  print('Vertical variable error: ${e.message}');\n  // Handle domain validation errors or variable ID issues\n  \n} on ApiException catch (e) {\n  print('API error: ${e.message}');\n  // Handle network connectivity or API service errors\n  \n} catch (e) {\n  print('Unexpected error: $e');\n  // Handle any other unexpected errors\n}\n"})}),"\n",(0,r.jsx)(i.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Group-Based Filtering"}),": Use variable IDs to focus on specific hierarchical branches"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Hierarchical Caching"}),": Cache group structures as they provide analytical context"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Relationship Mapping"}),": Build efficient mappings between vertical variables and data tables"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Navigation Optimization"}),": Use group structures to optimize multi-level data exploration"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Memory Management"}),": Handle large variable hierarchies efficiently in memory-constrained environments"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Cross-Domain Analysis"}),": Consider API rate limits when analyzing vertical variables across multiple domains"]}),"\n"]})]})}function p(a={}){const{wrapper:i}={...(0,t.R)(),...a.components};return i?(0,r.jsx)(i,{...a,children:(0,r.jsx)(d,{...a})}):d(a)}},8453:(a,i,e)=>{e.d(i,{R:()=>l,x:()=>s});var n=e(6540);const r={},t=n.createContext(r);function l(a){const i=n.useContext(t);return n.useMemo(function(){return"function"==typeof a?a(i):{...i,...a}},[i,a])}function s(a){let i;return i=a.disableParentContext?"function"==typeof a.components?a.components(r):a.components||r:l(a.components),n.createElement(t.Provider,{value:i},a.children)}}}]);