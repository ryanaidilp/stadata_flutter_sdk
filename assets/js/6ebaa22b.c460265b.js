"use strict";(self.webpackChunkstadata_flutter_sdk=self.webpackChunkstadata_flutter_sdk||[]).push([[1206],{3487:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"api-docs/view/intro","title":"Intro","description":"The View API provides comprehensive methods for retrieving detailed, in-depth information about specific items from the BPS (Badan Pusat Statistik) Indonesia statistical ecosystem. Unlike the List API which returns collections and summaries of data, the View API is specifically designed to deliver rich, complete details about individual statistical resources, enabling deep analysis, comprehensive understanding, and detailed examination of BPS content.","source":"@site/docs/api-docs/view/intro.md","sourceDirName":"api-docs/view","slug":"/api-docs/view/intro","permalink":"/stadata_flutter_sdk/docs/api-docs/view/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/ryanaidilp/stadata_flutter_sdk/tree/main/docs/docs/api-docs/view/intro.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"View API","permalink":"/stadata_flutter_sdk/docs/category/view-api"},"next":{"title":"News","permalink":"/stadata_flutter_sdk/docs/api-docs/view/news"}}');var a=i(4848),s=i(8453);const r={sidebar_position:1},l="Intro",o={},c=[{value:"Understanding the View API Architecture",id:"understanding-the-view-api-architecture",level:2},{value:"Usage",id:"usage",level:2},{value:"Available View Methods",id:"available-view-methods",level:2},{value:"Publication Resources",id:"publication-resources",level:3},{value:"Data Table Resources",id:"data-table-resources",level:3},{value:"Communication Resources",id:"communication-resources",level:3},{value:"Classification Resources",id:"classification-resources",level:3},{value:"Universal Usage Pattern",id:"universal-usage-pattern",level:2},{value:"Parameter Specifications",id:"parameter-specifications",level:3},{value:"Required Parameters",id:"required-parameters",level:4},{value:"Optional Parameters",id:"optional-parameters",level:4},{value:"Error Handling",id:"error-handling",level:2},{value:"Common Error Types",id:"common-error-types",level:3},{value:"Error Handling Pattern",id:"error-handling-pattern",level:3},{value:"Robust Error Handling for Production",id:"robust-error-handling-for-production",level:3},{value:"Integration Patterns",id:"integration-patterns",level:2},{value:"Relationship with List API",id:"relationship-with-list-api",level:3},{value:"Cross-Resource Integration",id:"cross-resource-integration",level:3},{value:"Advanced Usage Patterns",id:"advanced-usage-patterns",level:2},{value:"Batch Processing with Error Resilience",id:"batch-processing-with-error-resilience",level:3},{value:"Resource-Specific Workflows",id:"resource-specific-workflows",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"intro",children:"Intro"})}),"\n",(0,a.jsx)(n.p,{children:"The View API provides comprehensive methods for retrieving detailed, in-depth information about specific items from the BPS (Badan Pusat Statistik) Indonesia statistical ecosystem. Unlike the List API which returns collections and summaries of data, the View API is specifically designed to deliver rich, complete details about individual statistical resources, enabling deep analysis, comprehensive understanding, and detailed examination of BPS content."}),"\n",(0,a.jsx)(n.p,{children:"The View API serves as the detailed content access layer of the STADATA Flutter SDK, providing applications with the capability to present users with complete, contextualized information about statistical publications, data tables, news articles, press releases, and classification systems."}),"\n",(0,a.jsx)(n.h2,{id:"understanding-the-view-api-architecture",children:"Understanding the View API Architecture"}),"\n",(0,a.jsx)(n.p,{children:"The View API is built around the concept of detailed resource retrieval:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Individual Focus"}),": Each API call targets a specific, identified resource for comprehensive detail retrieval"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Rich Content"}),": Returns complete metadata, content, and contextual information for items"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Domain Contextualization"}),": Provides domain-specific details and relationships for each resource"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Multimedia Support"}),": Access to associated files, images, and supplementary materials"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Hierarchical Data"}),": For complex items like classifications, provides complete structural information"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,a.jsx)(n.p,{children:"To access the View API functionality:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"final view = StadataFlutter.instance.view;\n"})}),"\n",(0,a.jsx)(n.h2,{id:"available-view-methods",children:"Available View Methods"}),"\n",(0,a.jsx)(n.p,{children:"The View API provides detailed access to key BPS content types:"}),"\n",(0,a.jsx)(n.h3,{id:"publication-resources",children:"Publication Resources"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"./publication",children:"Publications"})}),": Comprehensive publication details including metadata, abstracts, PDF access, and bibliographic information","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Complete publication metadata with ISSN, catalogue numbers, and publication schedules"}),"\n",(0,a.jsx)(n.li,{children:"Full abstract content and document structure information"}),"\n",(0,a.jsx)(n.li,{children:"Direct access to PDF files and cover images"}),"\n",(0,a.jsx)(n.li,{children:"Publication series and version tracking"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"data-table-resources",children:"Data Table Resources"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"./static-table",children:"Static Tables"})}),": Detailed static table information with complete content access","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Full table metadata including data sources and methodology"}),"\n",(0,a.jsx)(n.li,{children:"Access to both HTML preview and Excel download formats"}),"\n",(0,a.jsx)(n.li,{children:"Subject classification and temporal coverage information"}),"\n",(0,a.jsx)(n.li,{children:"Data lineage and update history"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"communication-resources",children:"Communication Resources"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"./news",children:"News"})}),": Complete news article content with full text and multimedia"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Full article content with rich text formatting"}),"\n",(0,a.jsx)(n.li,{children:"Category classification and topical organization"}),"\n",(0,a.jsx)(n.li,{children:"Associated images and multimedia content"}),"\n",(0,a.jsx)(n.li,{children:"Publication timeline and update tracking"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"./press-release",children:"Press Releases"})}),": Comprehensive press release details with all materials"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Complete press release content and abstracts"}),"\n",(0,a.jsx)(n.li,{children:"Access to PDF documents and presentation slides"}),"\n",(0,a.jsx)(n.li,{children:"Cover images and visual materials"}),"\n",(0,a.jsx)(n.li,{children:"Subject classification and thematic organization"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"classification-resources",children:"Classification Resources"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"./statistic-classification",children:"Statistical Classifications"})}),": Detailed KBLI/KBKI classification with hierarchical structure","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Complete classification hierarchy and relationships"}),"\n",(0,a.jsx)(n.li,{children:"Industry codes and economic activity descriptions"}),"\n",(0,a.jsx)(n.li,{children:"Version history and classification updates"}),"\n",(0,a.jsx)(n.li,{children:"Cross-references and alternative coding systems"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"universal-usage-pattern",children:"Universal Usage Pattern"}),"\n",(0,a.jsx)(n.p,{children:"All View API methods follow a consistent and predictable pattern:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"// Standard View API call pattern\nfinal result = await StadataFlutter.instance.view.methodName(\n  id: itemId,             // Required: Unique identifier of the specific item\n  domain: domainCode,     // Required: Domain code for geographic/administrative context\n  lang: DataLanguage.id,  // Optional: Language preference (default: Indonesian)\n);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"parameter-specifications",children:"Parameter Specifications"}),"\n",(0,a.jsx)(n.h4,{id:"required-parameters",children:"Required Parameters"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"id"})}),": The unique identifier for the specific resource being requested"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"domain"})}),": The domain code specifying the administrative context and scope"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"optional-parameters",children:"Optional Parameters"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"lang"})}),": Language preference for localized content (defaults to Indonesian)"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,a.jsx)(n.p,{children:"View API methods return nullable objects and may throw specific exceptions based on the resource type:"}),"\n",(0,a.jsx)(n.h3,{id:"common-error-types",children:"Common Error Types"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Resource-specific exceptions"}),": Each View method throws specific exceptions (e.g., ",(0,a.jsx)(n.code,{children:"PublicationException"}),", ",(0,a.jsx)(n.code,{children:"NewsException"}),")"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"ApiException"}),": General API connectivity and service errors"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"ApiKeyNotFoundException"}),": Invalid or missing API key"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"ValidationException"}),": Invalid parameters or request format"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"error-handling-pattern",children:"Error Handling Pattern"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"try {\n  final publication = await StadataFlutter.instance.view.publication(\n    id: '123',\n    domain: '7200',\n    lang: DataLanguage.id,\n  );\n\n  if (publication != null) {\n    // Handle successful data retrieval\n    print('Publication: ${publication.title}');\n    print('Abstract: ${publication.abstract ?? 'No abstract available'}');\n    print('PDF URL: ${publication.pdf}');\n  } else {\n    // Handle case where item not found\n    print('Publication not found - may be unavailable or invalid ID');\n  }\n} on PublicationException catch (e) {\n  print('Publication-specific error: ${e.message}');\n  // Handle errors like invalid publication ID, domain restrictions\n} on ApiException catch (e) {\n  print('API communication error: ${e.message}');\n  // Handle network issues, server errors, rate limiting\n} on ApiKeyNotFoundException catch (e) {\n  print('Authentication error: ${e.message}');\n  // Handle API key issues\n} catch (e) {\n  print('Unexpected error: $e');\n  // Handle any other unforeseen errors\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"robust-error-handling-for-production",children:"Robust Error Handling for Production"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"Future<T?> safeViewCall<T>(\n  Future<T?> Function() viewCall,\n  String resourceType,\n) async {\n  try {\n    final result = await viewCall();\n    if (result == null) {\n      print('$resourceType not found or not available');\n    }\n    return result;\n  } on ApiKeyNotFoundException {\n    print('API key required for $resourceType access');\n    // Prompt user for API key configuration\n    return null;\n  } on ApiException catch (e) {\n    print('Service unavailable for $resourceType: ${e.message}');\n    // Implement retry logic or fallback\n    return null;\n  } catch (e) {\n    print('Failed to retrieve $resourceType: $e');\n    // Log error for debugging\n    return null;\n  }\n}\n\n// Usage example\nfinal publication = await safeViewCall(\n  () => StadataFlutter.instance.view.publication(\n    id: '123',\n    domain: '7200',\n  ),\n  'Publication',\n);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"integration-patterns",children:"Integration Patterns"}),"\n",(0,a.jsx)(n.h3,{id:"relationship-with-list-api",children:"Relationship with List API"}),"\n",(0,a.jsx)(n.p,{children:"The View API works best in combination with the List API for comprehensive data workflows:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Discovery"}),": Use List API to find items of interest"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Details"}),": Use View API to get comprehensive information about specific items"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Analysis"}),": Combine both for detailed analysis and reporting"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"// Complete workflow example\n// 1. Find publications using List API\nfinal publicationsList = await StadataFlutter.instance.list.publications(\n  domain: '7200',\n  keyword: 'ekonomi',\n);\n\nprint('Found ${publicationsList.data.length} economic publications');\n\n// 2. Get detailed information for each publication\nfinal detailedPublications = <Publication>[];\n\nfor (final pubSummary in publicationsList.data.take(5)) {\n  final detailedPub = await StadataFlutter.instance.view.publication(\n    id: pubSummary.id,\n    domain: '7200',\n  );\n\n  if (detailedPub != null) {\n    detailedPublications.add(detailedPub);\n    print('Loaded: ${detailedPub.title}');\n    print('Abstract available: ${detailedPub.abstract != null}');\n    print('PDF size: ${detailedPub.size}');\n  }\n\n  // Rate limiting\n  await Future.delayed(Duration(milliseconds: 200));\n}\n\nprint('Successfully loaded ${detailedPublications.length} detailed publications');\n"})}),"\n",(0,a.jsx)(n.h3,{id:"cross-resource-integration",children:"Cross-Resource Integration"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"// Building comprehensive domain overview\nFuture<void> buildDomainContentOverview(String domain) async {\n  // Get overview using List APIs\n  final [publications, news, pressReleases] = await Future.wait([\n    StadataFlutter.instance.list.publications(domain: domain),\n    StadataFlutter.instance.list.news(domain: domain),\n    StadataFlutter.instance.list.pressReleases(domain: domain),\n  ]);\n\n  print('=== Domain $domain Content Overview ===');\n  print('Publications: ${publications.data.length}');\n  print('News Articles: ${news.data.length}');\n  print('Press Releases: ${pressReleases.data.length}');\n\n  // Get detailed examples from each category\n  if (publications.data.isNotEmpty) {\n    final detailedPub = await StadataFlutter.instance.view.publication(\n      id: publications.data.first.id,\n      domain: domain,\n    );\n    if (detailedPub != null) {\n      print('Latest Publication: ${detailedPub.title}');\n      print('Publication Date: ${detailedPub.releaseDate}');\n    }\n  }\n\n  if (news.data.isNotEmpty) {\n    final detailedNews = await StadataFlutter.instance.view.news(\n      id: news.data.first.id,\n      domain: domain,\n    );\n    if (detailedNews != null) {\n      print('Latest News: ${detailedNews.title}');\n      print('News Category: ${detailedNews.category ?? 'General'}');\n    }\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"advanced-usage-patterns",children:"Advanced Usage Patterns"}),"\n",(0,a.jsx)(n.h3,{id:"batch-processing-with-error-resilience",children:"Batch Processing with Error Resilience"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"Future<List<T>> batchViewRequests<T>(\n  List<String> ids,\n  String domain,\n  Future<T?> Function(String id, String domain) viewFunction,\n  {int batchSize = 5, Duration delay = const Duration(milliseconds: 300)}\n) async {\n  final results = <T>[];\n\n  for (int i = 0; i < ids.length; i += batchSize) {\n    final batch = ids.skip(i).take(batchSize);\n    final batchResults = await Future.wait(\n      batch.map((id) => viewFunction(id, domain)),\n    );\n\n    // Filter out null results\n    results.addAll(batchResults.whereType<T>());\n\n    // Rate limiting between batches\n    if (i + batchSize < ids.length) {\n      await Future.delayed(delay);\n    }\n  }\n\n  return results;\n}\n\n// Usage example\nfinal publicationIds = ['1', '2', '3', '4', '5'];\nfinal detailedPublications = await batchViewRequests(\n  publicationIds,\n  '7200',\n  (id, domain) => StadataFlutter.instance.view.publication(\n    id: id,\n    domain: domain,\n  ),\n);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"resource-specific-workflows",children:"Resource-Specific Workflows"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"// Content analysis workflow combining List and View APIs\nclass ContentAnalysisWorkflow {\n  static Future<Map<String, dynamic>> analyzePublications(\n    String domain, {\n    String? keyword,\n    int maxAnalyze = 10,\n  }) async {\n    // 1. Discover publications\n    final publicationsList = await StadataFlutter.instance.list.publications(\n      domain: domain,\n      keyword: keyword,\n    );\n\n    // 2. Get detailed information for analysis\n    final detailedPubs = <Publication>[];\n    for (final pub in publicationsList.data.take(maxAnalyze)) {\n      final detailed = await StadataFlutter.instance.view.publication(\n        id: pub.id,\n        domain: domain,\n      );\n      if (detailed != null) detailedPubs.add(detailed);\n      await Future.delayed(Duration(milliseconds: 200));\n    }\n\n    // 3. Perform analysis\n    final analysis = {\n      'totalFound': publicationsList.data.length,\n      'analyzed': detailedPubs.length,\n      'withAbstracts': detailedPubs.where((p) => p.abstract != null).length,\n      'averageSize': detailedPubs.isNotEmpty\n          ? detailedPubs.map((p) => _parseSize(p.size)).where((s) => s > 0).fold(0.0, (a, b) => a + b) / detailedPubs.length\n          : 0.0,\n      'recentPublications': detailedPubs.where((p) =>\n          p.releaseDate != null &&\n          p.releaseDate!.isAfter(DateTime.now().subtract(Duration(days: 90)))\n      ).length,\n    };\n\n    return analysis;\n  }\n\n  static double _parseSize(String sizeStr) {\n    // Simple size parsing logic\n    final match = RegExp(r'([\\d.]+)\\s*(kb|mb)', caseSensitive: false).firstMatch(sizeStr.toLowerCase());\n    if (match != null) {\n      final value = double.tryParse(match.group(1) ?? '0') ?? 0;\n      final unit = match.group(2)?.toLowerCase();\n      return unit == 'mb' ? value * 1024 : value;\n    }\n    return 0.0;\n  }\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>l});var t=i(6540);const a={},s=t.createContext(a);function r(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);